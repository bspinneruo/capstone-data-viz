palette = colorRampPalette(c("#e0dfda", "#bdbfbf", "#303333"))(100),
domain = overall_corp_rate$mean_corp_rate
)
leaflet(overall_corp_rate, options = leafletOptions(zoomControl = FALSE, dragging = TRUE)) %>%
addTiles() %>%
# ✅ Set initial view to focus on the U.S.
setView(lng = -98.5795, lat = 39.8283, zoom = 4) %>%  # Center at U.S. geographic center
# ✅ Restrict users from moving outside the U.S.
fitBounds(lng1 = -125, lat1 = 25, lng2 = -66, lat2 = 50) %>%
addPolygons(
fillColor = ~colorNumeric(
palette = colorRampPalette(c( "#e0dfda", "#bdbfbf","#303333"))(100),
domain = overall_corp_rate$mean_corp_rate)(mean_corp_rate),
color = "white",
weight = 1,
fillOpacity = .8,
highlightOptions = highlightOptions(weight = 3, color = "#666", fillOpacity = 0.9),
label = ~paste0(region, ": ", round(mean_corp_rate, 2), "% Avg. Corporal Punishment"),
layerId = ~STATE_CODE  # Use STATE_CODE instead of region
) %>%
addControl(
html = "<div style='font-weight: bold; font-size:16px; color: black; text-align: center;'>
Average Corporal Punishment Rate by State from 1972 to 2020
<br>
<span style='font-weight:normal; font-size:14px;'>
Select State to Reveal Corporal Trends by Race over Time
</span>
</div>",
position = "topleft"
) %>%
addLegend(
"bottomright",
pal = color_scale,
values = overall_corp_rate$mean_corp_rate,
title = "Avg. Corporal Rate (%)\n(Light = Low, Dark = High)",
labFormat = labelFormat(suffix = "%"),
opacity = 0.9,
bins = 4,
na.label = ""
)
})
selected_state_corp <- reactiveVal(NULL)
# ✅ Capture clicks on the map
observeEvent(input$corp_map_shape_click, {
clicked_state_corp <- input$corp_map_shape_click$id
if (!is.null(clicked_state_corp)) {
selected_state_corp(clicked_state_corp)
updateTabsetPanel(session, "second_tab", selected = "State Corp Trends")
}
})
output$corp_trend <- renderPlotly({
req(selected_state_corp())  # Ensure a state is selected
state_data2 <- df_trend %>% filter(STATE_CODE == selected_state_corp())
plot_ly(
data = state_data2,
x = ~YEAR,
y = ~Corporal_Rate,
color = ~race,
colors = race_colors
# type = 'scatter',
# mode = 'lines'
) %>%
add_trace(
data = state_data2,
x = ~YEAR,
y = ~Corporal_Rate,
color = ~race,
colors = race_colors,
type = 'scatter',
mode = 'lines',
line = list(width = 3),
showlegend = TRUE  # Hide duplicate legend entries
) %>%
layout(
title = paste("Corporal Punishment Rates Over Time in", selected_state_corp()),
xaxis = list(title = "Year"),
yaxis = list(title = "Corporal Punishment Rate (%)"),
legend = list(title = list(text = "Race"),
hovermode = "x unified")
)
})
plotlyOutput("corp_trend", height = 500)
library(dplyr)
library(ggplot2)
library(tidyr)
library(broom)
library(purrr)
# Example: Assuming you have a data frame `df` with columns: STATE_CODE, YEAR, CORP_, ENR_, and ban_status (0 = no ban, 1 = ban)
# Step 1: Calculate corporal punishment rates
cp2 <- cp %>%
mutate(corp_rate = if_else(ENR_ > 0, (CORP_ / ENR_) * 100, 0))
# Merge with map data
ban_states_data <- df_corp_join %>%
left_join(cp2, by = c("region", "STATE_CODE", "YEAR" = "YEAR", "race", "CORP_", "ENR_", "corp_rate"))
# Merge with map data
ban_states_data <- df_corp_join %>%
left_join(cp2, by = c("YEAR", "STATE_CODE"))
View(ban_states_data)
# Merge with map data
cp2_with_ban_info <- cp2 %>%
left_join(ban_states_data %>% select(region, DD, T_YEAR), by = "region")
# Merge with map data
cp2_with_ban_info <- cp2 %>%
left_join(df_corp_join %>% select(region, DD, T_YEAR), by = "region")
View(ban_states_data)
# Merge with map data
ban_states_data<- cp2 %>%
left_join(df_corp_join %>% select(STATE_CODE, DD, T_YEAR), by = "STATE_CODE")
View(ban_states_data)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(tidyr)
library(broom)
library(purrr)
# Example: Assuming you have a data frame `df` with columns: STATE_CODE, YEAR, CORP_, ENR_, and ban_status (0 = no ban, 1 = ban)
# Step 1: Calculate corporal punishment rates
cp2 <- cp %>%
mutate(corp_rate = if_else(ENR_ > 0, (CORP_ / ENR_) * 100, 0))
# Merge with map data
ban_states_data<- cp2 %>%
left_join(df_corp_join %>% select(STATE_CODE, DD, T_YEAR), by = "STATE_CODE")
#
# # Step 2: Build a predictive model using states that have banned corporal punishment
# ban_states_data <- df %>% filter(ban_status == 1)
# Fit a linear mixed model or GLM to estimate the relationship
# Here, using a simple linear model as an example:
model <- lm(corp_rate ~ YEAR + factor(STATE_CODE), data = ban_states_data)
# Step 3: Predict for non-ban states as if they had adopted a ban
non_ban_states <- df %>% filter(ban_status == 0)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(tidyr)
library(broom)
library(purrr)
# Example: Assuming you have a data frame `df` with columns: STATE_CODE, YEAR, CORP_, ENR_, and ban_status (0 = no ban, 1 = ban)
# Step 1: Calculate corporal punishment rates
cp2 <- cp %>%
mutate(corp_rate = if_else(ENR_ > 0, (CORP_ / ENR_) * 100, 0))
# Merge with map data
ban_states_data<- cp2 %>%
left_join(df_corp_join %>% select(STATE_CODE, DD, T_YEAR), by = "STATE_CODE")
#
# # Step 2: Build a predictive model using states that have banned corporal punishment
# ban_states_data <- df %>% filter(ban_status == 1)
# Fit a linear mixed model or GLM to estimate the relationship
# Here, using a simple linear model as an example:
model <- lm(corp_rate ~ YEAR + factor(STATE_CODE), data = ban_states_data)
# Step 3: Predict for non-ban states as if they had adopted a ban
non_ban_states <- ban_states_data %>% filter(DD == 0)
non_ban_states <- non_ban_states %>%
mutate(predicted_rate_if_banned = predict(model, newdata = non_ban_states))
# Step 4: Visualize predicted vs. actual for non-ban states
non_ban_states_long <- non_ban_states %>%
select(STATE_CODE, YEAR, corp_rate, predicted_rate_if_banned) %>%
pivot_longer(cols = c(corp_rate, predicted_rate_if_banned), names_to = "scenario", values_to = "rate")
# Example visualization for a chosen state
state_to_plot <- "TX"  # Replace with user-selected state
ggplot(filter(non_ban_states_long, STATE_CODE == state_to_plot), aes(x = YEAR, y = rate, color = scenario)) +
geom_line(size = 1.2) +
labs(
title = paste("Predicted vs. Actual Corp Punishment Rates for", state_to_plot),
y = "Corporal Punishment Rate (%)",
color = "Scenario"
) +
theme_minimal()
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(tidyr)
library(broom)
library(purrr)
# Example: Assuming you have a data frame `df` with columns: STATE_CODE, YEAR, CORP_, ENR_, and ban_status (0 = no ban, 1 = ban)
# Step 1: Calculate corporal punishment rates
cp2 <- cp %>%
mutate(corp_rate = if_else(ENR_ > 0, (CORP_ / ENR_) * 100, 0))
# Merge with map data
ban_states_data<- cp2 %>%
left_join(df_corp_join %>% select(STATE_CODE, DD, T_YEAR), by = "STATE_CODE")
# Step 2: Fit a model using states that banned corporal punishment
model <- lm(corp_rate ~ YEAR + factor(STATE_CODE), data = ban_states_data %>% filter(DD == 1))
# Step 3: Predict for non-ban states as if they had banned
non_ban_states <- ban_states_data %>%
filter(DD == 0) %>%
mutate(predicted_rate_if_banned = predict(model, newdata = .))
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(tidyr)
library(broom)
library(purrr)
# Example: Assuming you have a data frame `df` with columns: STATE_CODE, YEAR, CORP_, ENR_, and ban_status (0 = no ban, 1 = ban)
# Step 1: Calculate corporal punishment rates
cp2 <- cp %>%
mutate(corp_rate = if_else(ENR_ > 0, (CORP_ / ENR_) * 100, 0))
# Merge with map data
ban_states_data<- cp2 %>%
left_join(df_corp_join %>% select(STATE_CODE, DD, T_YEAR), by = "STATE_CODE")
# Step 2: Fit a model using states that banned corporal punishment
library(lme4)
model <- lmer(corp_rate ~ YEAR + (1 | STATE_CODE), data = ban_states_data %>% filter(DD == 1))
# Step 3: Predict for non-ban states as if they had banned
non_ban_states <- ban_states_data %>%
filter(DD == 0) %>%
mutate(predicted_rate_if_banned = predict(model, newdata = .))
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(tidyr)
library(broom)
library(purrr)
# Example: Assuming you have a data frame `df` with columns: STATE_CODE, YEAR, CORP_, ENR_, and ban_status (0 = no ban, 1 = ban)
# Step 1: Calculate corporal punishment rates
cp2 <- cp %>%
mutate(corp_rate = if_else(ENR_ > 0, (CORP_ / ENR_) * 100, 0))
# Merge with map data
ban_states_data<- cp2 %>%
left_join(df_corp_join %>% select(STATE_CODE, DD, T_YEAR), by = "STATE_CODE")
# Step 2: Fit a model using states that banned corporal punishment
library(lme4)
model <- lmer(corp_rate ~ YEAR + (1 | STATE_CODE), data = ban_states_data %>% filter(DD == 1))
# Step 3: Predict for non-ban states as if they had banned
non_ban_states <- ban_states_data %>%
filter(DD == 0) %>%
mutate(predicted_rate_if_banned = predict(model, newdata = ., allow.new.levels = TRUE))
# Step 4: Prepare long format for plotting
non_ban_states_long <- non_ban_states %>%
select(STATE_CODE, YEAR, corp_rate, predicted_rate_if_banned) %>%
pivot_longer(cols = c(corp_rate, predicted_rate_if_banned), names_to = "Scenario", values_to = "Rate")
# Step 5: Improved visualization
state_to_plot <- "TX"  # Customize this dynamically if desired
ggplot(filter(non_ban_states_long, STATE_CODE == state_to_plot), aes(x = YEAR, y = Rate, color = Scenario)) +
geom_line(aes(linetype = Scenario), size = 1.4) +
geom_point(data = filter(non_ban_states_long, STATE_CODE == state_to_plot & Scenario == "corp_rate"),
aes(x = YEAR, y = Rate), color = "darkred", size = 1.5, alpha = 0.7) +
scale_color_manual(values = c("corp_rate" = "#d73027", "predicted_rate_if_banned" = "#4575b4")) +
labs(
title = paste("Predicted vs. Actual Corporal Punishment Rates for", state_to_plot),
subtitle = "Blue = Predicted had a ban been adopted; Red = Actual reported rate",
x = "Year",
y = "Corporal Punishment Rate (%)",
caption = "Prediction modeled using data from states that implemented bans"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(size = 12, face = "italic")
)
ggplot(filter(non_ban_states_long, STATE_CODE == state_to_plot),
aes(x = YEAR, y = rate, color = scenario)) +
geom_smooth(se = FALSE, method = "loess", span = 0.4, size = 1.5) +  # smooth lines
scale_y_continuous(limits = c(0, max(non_ban_states_long$corp_rate, na.rm = TRUE) * 1.1)) +
scale_color_manual(values = c("corp_rate" = "darkred", "predicted_rate_if_banned" = "blue")) +
labs(
title = paste("Predicted vs. Actual Corporal Punishment Rates for", state_to_plot),
subtitle = "Blue = Predicted if ban adopted; Red = Actual historical rates",
y = "Corporal Punishment Rate (%)",
x = "Year",
color = "Scenario"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 18),
plot.subtitle = element_text(size = 14, face = "italic"),
legend.position = "top"
)
View(ban_states_data)
summarise(ban_states_data$corp_rate)
View(ban_states_data)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(tidyr)
library(broom)
library(purrr)
# Example: Assuming you have a data frame `df` with columns: STATE_CODE, YEAR, CORP_, ENR_, and ban_status (0 = no ban, 1 = ban)
# Step 1: Calculate corporal punishment rates
cp2 <- cp %>%
mutate(corp_rate = if_else(ENR_ > 0, (CORP_ / ENR_) * 100, 0))
# Merge with map data
ban_states_data<- cp2 %>%
left_join(df_corp_join %>% select(STATE_CODE, DD, T_YEAR), by = "STATE_CODE")
# Step 2: Fit a model using states that banned corporal punishment
library(lme4)
model <- lmer(corp_rate ~ YEAR + (1 | STATE_CODE), data = ban_states_data %>% filter(DD == 1))
# Step 3: Predict for non-ban states as if they had banned
non_ban_states <- ban_states_data %>%
filter(DD == 0) %>%
mutate(predicted_rate_if_banned = predict(model, newdata = ., allow.new.levels = TRUE))
# Step 4: Prepare long format for plotting
non_ban_states_long <- non_ban_states %>%
select(STATE_CODE, YEAR, corp_rate, predicted_rate_if_banned) %>%
pivot_longer(cols = c(corp_rate, predicted_rate_if_banned), names_to = "Scenario", values_to = "Rate")
# Step 5: Improved visualization
state_to_plot <- "TX"  # Customize this dynamically if desired
ggplot(filter(non_ban_states_long, STATE_CODE == state_to_plot), aes(x = YEAR, y = Rate, color = Scenario)) +
geom_line(aes(linetype = Scenario), size = 1.4) +
geom_point(data = filter(non_ban_states_long, STATE_CODE == state_to_plot & Scenario == "corp_rate"),
aes(x = YEAR, y = Rate), color = "darkred", size = 1.5, alpha = 0.7) +
scale_color_manual(values = c("corp_rate" = "#d73027", "predicted_rate_if_banned" = "#4575b4")) +
labs(
title = paste("Predicted vs. Actual Corporal Punishment Rates for", state_to_plot),
subtitle = "Blue = Predicted had a ban been adopted; Red = Actual reported rate",
x = "Year",
y = "Corporal Punishment Rate (%)",
caption = "Prediction modeled using data from states that implemented bans"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(size = 12, face = "italic")
)
ggplot(filter(non_ban_states_long, STATE_CODE == state_to_plot),
aes(x = YEAR, y = rate, color = scenario)) +
geom_smooth(se = FALSE, method = "loess", span = 0.4, size = 1.5) +  # smooth lines
scale_y_continuous(limits = c(0, max(non_ban_states_long$corp_rate, na.rm = TRUE) * 1.1)) +
scale_color_manual(values = c("corp_rate" = "darkred", "predicted_rate_if_banned" = "blue")) +
labs(
title = paste("Predicted vs. Actual Corporal Punishment Rates for", state_to_plot),
subtitle = "Blue = Predicted if ban adopted; Red = Actual historical rates",
y = "Corporal Punishment Rate (%)",
x = "Year",
color = "Scenario"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 18),
plot.subtitle = element_text(size = 14, face = "italic"),
legend.position = "top"
)
ggplot(filter(non_ban_states_long, STATE_CODE == state_to_plot),
aes(x = YEAR, y = rate, color = scenario)) +
geom_smooth(se = FALSE, method = "loess", span = 0.4, size = 1.5) +  # smooth lines
scale_y_continuous(limits = c(0, max(non_ban_states_long$rate, na.rm = TRUE) * 1.1)) +
scale_color_manual(values = c("corp_rate" = "darkred", "predicted_rate_if_banned" = "blue")) +
labs(
title = paste("Predicted vs. Actual Corporal Punishment Rates for", state_to_plot),
subtitle = "Blue = Predicted if ban adopted; Red = Actual historical rates",
y = "Corporal Punishment Rate (%)",
x = "Year",
color = "Scenario"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 18),
plot.subtitle = element_text(size = 14, face = "italic"),
legend.position = "top"
)
non_ban_states_long2 <- non_ban_states %>%
select(STATE_CODE, YEAR, corp_rate, predicted_rate_if_banned) %>%
pivot_longer(cols = c(corp_rate, predicted_rate_if_banned),
names_to = "scenario",
values_to = "rate")
ggplot(filter(non_ban_states_long2, STATE_CODE == state_to_plot),
aes(x = YEAR, y = rate, color = scenario)) +
geom_smooth(se = FALSE, method = "loess", span = 0.4, size = 1.5) +  # smooth lines
scale_y_continuous(limits = c(0, max(non_ban_states_long$rate, na.rm = TRUE) * 1.1)) +
scale_color_manual(values = c("corp_rate" = "darkred", "predicted_rate_if_banned" = "blue")) +
labs(
title = paste("Predicted vs. Actual Corporal Punishment Rates for", state_to_plot),
subtitle = "Blue = Predicted if ban adopted; Red = Actual historical rates",
y = "Corporal Punishment Rate (%)",
x = "Year",
color = "Scenario"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 18),
plot.subtitle = element_text(size = 14, face = "italic"),
legend.position = "top"
)
ggplot(filter(non_ban_states_long, STATE_CODE == state_to_plot), aes(x = YEAR, y = Rate, color = Scenario)) +
geom_line(aes(linetype = Scenario), size = 1.4) +
geom_point(data = filter(non_ban_states_long, STATE_CODE == state_to_plot & Scenario == "corp_rate"),
aes(x = YEAR, y = Rate), color = "darkred", size = 1.5, alpha = 0.7) +
scale_color_manual(values = c("corp_rate" = "#d73027", "predicted_rate_if_banned" = "#4575b4")) +
labs(
title = paste("Predicted vs. Actual Corporal Punishment Rates for", state_to_plot),
subtitle = "Blue = Predicted had a ban been adopted; Red = Actual reported rate",
x = "Year",
y = "Corporal Punishment Rate (%)",
caption = "Prediction modeled using data from states that implemented bans"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(size = 12, face = "italic")
)
unique(non_ban_states_long$Scenario)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(tidyr)
library(broom)
library(purrr)
# Example: Assuming you have a data frame `df` with columns: STATE_CODE, YEAR, CORP_, ENR_, and ban_status (0 = no ban, 1 = ban)
# Step 1: Calculate corporal punishment rates
cp2 <- cp %>%
mutate(corp_rate = if_else(ENR_ > 0, (CORP_ / ENR_) * 100, 0))
# Merge with map data
ban_states_data<- cp2 %>%
left_join(df_corp_join %>% select(STATE_CODE, DD, T_YEAR), by = "STATE_CODE")
# Step 2: Fit a model using states that banned corporal punishment
library(lme4)
model <- lmer(corp_rate ~ YEAR + (1 | STATE_CODE), data = ban_states_data %>% filter(DD == 1))
# Step 3: Predict for non-ban states as if they had banned
non_ban_states <- ban_states_data %>%
filter(DD == 0) %>%
mutate(predicted_rate_if_banned = predict(model, newdata = ., allow.new.levels = TRUE))
# Step 4: Prepare long format for plotting
non_ban_states_long <- non_ban_states %>%
select(STATE_CODE, YEAR, corp_rate, predicted_rate_if_banned) %>%
pivot_longer(cols = c(corp_rate, predicted_rate_if_banned), names_to = "Scenario", values_to = "Rate")
# unique(non_ban_states_long$Scenario)
# # Step 5: Improved visualization
# state_to_plot <- "TX"  # Customize this dynamically if desired
output$pred_plot <- renderPlot({
req(selected_state_corp())
ggplot(filter(non_ban_states_long, STATE_CODE == selected_state_corp()), aes(x = YEAR, y = Rate, color = Scenario)) +
geom_line(aes(linetype = Scenario), size = 1.4) +
geom_point(data = filter(non_ban_states_long, STATE_CODE == selected_state_corp() & Scenario == "corp_rate"),
aes(x = YEAR, y = Rate), color = "darkred", size = 1.5, alpha = 0.7) +
scale_color_manual(values = c("corp_rate" = "#d73027", "predicted_rate_if_banned" = "#4575b4")) +
labs(
title = paste("Predicted vs. Actual Corporal Punishment Rates for", selected_state_corp()),
subtitle = "Blue = Predicted had a ban been adopted; Red = Actual reported rate",
x = "Year",
y = "Corporal Punishment Rate (%)",
caption = "Prediction modeled using data from states that implemented bans"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(size = 12, face = "italic")
)
})
rsconnect::deployApp(
appDir = ".",
appPrimaryDoc = "shiny_improved.Rmd",
appFiles = c(
"shiny_improved.Rmd",
"corp_76to20_bystate_MGyearrecoded.xlsx",
"suspensions_72to21_bystate_MGyearrecoded.xlsx",
"treatment dataset_2year.xlsx"
)
rsconnect::deployApp(
rsconnect::deployApp(
appDir = ".",
appPrimaryDoc = "shiny_capstone.Rmd",
appFiles = c(
"shiny_capstone.Rmd",
"corp_76to20_bystate_MGyearrecoded.xlsx",
"suspensions_72to21_bystate_MGyearrecoded.xlsx",
"treatment dataset_2year.xlsx"
)
)
View(ban_states_data)
rsconnect::deployApp(
appDir = ".",
appPrimaryDoc = "shiny_capstone.Rmd",
appFiles = c(
"shiny_capstone.Rmd",
"corp_76to20_bystate_MGyearrecoded.xlsx",
"suspensions_72to21_bystate_MGyearrecoded.xlsx",
"treatment dataset_2year.xlsx"
)
)
rsconnect::deployApp(
appDir = ".",
appPrimaryDoc = "shiny_capstone.Rmd",
appFiles = c(
"shiny_capstone.Rmd",
"corp_76to20_bystate_MGyearrecoded.xlsx",
"suspensions_72to21_bystate_MGyearrecoded.xlsx",
"treatment dataset_2year.xlsx"
)
)
rsconnect::deployApp(
appDir = ".",
appPrimaryDoc = "shiny_capstone.Rmd",
appFiles = c(
"shiny_capstone.Rmd",
"corp_76to20_bystate_MGyearrecoded.xlsx",
"suspensions_72to21_bystate_MGyearrecoded.xlsx",
"treatment dataset_2year.xlsx"
)
)
rsconnect::deployApp(
appDir = ".",
appPrimaryDoc = "shiny_capstone.Rmd",
appFiles = c(
"shiny_capstone.Rmd",
"corp_76to20_bystate_MGyearrecoded.xlsx",
"suspensions_72to21_bystate_MGyearrecoded.xlsx",
"treatment dataset_2year.xlsx"
)
)
rsconnect::deployApp(
appDir = ".",
appPrimaryDoc = "shiny_capstone.Rmd",
appFiles = c(
"shiny_capstone.Rmd",
"corp_76to20_bystate_MGyearrecoded.xlsx",
"suspensions_72to21_bystate_MGyearrecoded.xlsx",
"treatment dataset_2year.xlsx"
)
)
