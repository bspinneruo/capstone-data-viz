# Create state lookup for abbreviations
state_lookup <- data.frame(STATE_CODE = state.abb, region = tolower(state.name))
# Merge df_corp with full state names
df_corp_join <- left_join(df_corp, state_lookup, by = "STATE_CODE")
# Fix DC missing in state mapping
df_corp_join$region <- if_else(is.na(df_corp_join$region), "district of columbia", df_corp_join$region)
# Merge with map data
df_join <- left_join(us_states_sf, df_corp_join, by = "region")
# Define color palette
color_palette <- list("0" = "#e5de54", "1" = "#808c73")
brand_colors <- list(
dark_gray = "#303333",
sage = "#808c73",
light_gray = "#bdbfbf"
)
# Store selected state in a reactive value
selected_state <- reactiveVal(NULL)
# # Create state lookup for abbreviations
# state_lookup <- data.frame(STATE_CODE = state.abb, region = tolower(state.name))
### Static Map
renderPlot({
ggplot() +
geom_sf(data = df_join, aes(fill = as.factor(DD)), color = "white", size = 0.3) +
scale_fill_manual(values = color_palette, labels = c("Not Adopted", "Adopted")) +
theme_minimal() +
labs(
title = "Corporal Punishment Ban Adoption by State",
subtitle = "States that adopted bans starting in 2020",
fill = "Ban Status"
) +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
})
# Merge df_corp with full state names
df_corp2 <- left_join(df2, state_lookup, by = "STATE_CODE")
# Fix DC missing in state mapping
df_corp2$region <- if_else(is.na(df_corp2$region), "district of columbia", df_corp2$region)
# Merge with map data
int_data <- left_join(us_states_sf, df_corp2, by = "region")
## Combined all -- us_states_sf2
### Pivot race wider
int_data <- int_data %>%
mutate(across(c(pct_, OSS_), ~ replace_na(.x, 0))) %>%  # Replace NA with 0 in selected columns
pivot_wider(
names_from = race,   # Convert race categories into column names
values_from = pct_,  # Values to fill in new columns
values_fill = list(pct_ = 0)) # replace na's with 0s
# Drop geometry column before summarization
#
# int_data_clean <- int_data %>%
#   st_drop_geometry()  # Removes spatial geometry
#
# int_data_clean <- int_data_clean %>%
#   group_by(region) %>%
#   summarise(Average_Suspensions = mean(total, na.rm = TRUE))
#
# int_data <- left_join(int_data_clean, int_data, by = "region")
#
long_data <- int_data %>%
pivot_longer(cols = c(AI, AS, BL, HI, HP, MR, WH, total), names_to = "race", values_to = "pct_") %>%
group_by(YEAR, race, STATE_CODE)
# View transformed data
#head(int_data)
### Interactive map
output$map <- renderLeaflet({
leaflet(int_data, options = leafletOptions(zoomControl = FALSE, dragging = FALSE)) %>%
addTiles() %>%
# âœ… Set initial view to focus on the U.S.
setView(lng = -98.5795, lat = 39.8283, zoom = 4) %>%  # Center at U.S. geographic center
# âœ… Restrict users from moving outside the U.S.
fitBounds(lng1 = -125, lat1 = 25, lng2 = -66, lat2 = 50) %>%
addPolygons(
fillColor = ~colorNumeric("Blues", int_data$total)(total),
color = "white",
weight = 1,
fillOpacity = 0.8,
highlightOptions = highlightOptions(weight = 3, color = "#666", fillOpacity = 0.9),
label = ~paste0(region, ": ", round(total, 2), "% Avg. Overall Suspended"),
layerId = ~STATE_CODE  # Use STATE_CODE instead of region
)
})
########################################################
### Observe Click on Map (Dynamically Updates Timeline)
observeEvent(input$map_shape_click, {
print(input$map_shape_click)  # check if this captures a state
clicked_state <- input$map_shape_click$id  # Get the clicked state name
if (!is.null(clicked_state)) {
print(paste("Clicked State:", clicked_state))  # print clicked state
selected_state(clicked_state)  # Store clicked state in reactive value
updateTabsetPanel(session, "main_tabs", selected = "State Timeline")
}
})
###### State-Specific Trends Plotly Time Series
output$state_plot <- renderPlotly({
req(selected_state())  # Ensure a state is selected
# Filter data for selected state
state_data <- long_data %>% filter(STATE_CODE == selected_state())  # Match with STATE_CODE
state_data <- state_data %>%
mutate(pct_ = pmax(0, pct_))
# Create smoothed data
smoothed_data <- state_data %>%
group_by(race) %>%
mutate(Smoothed = pmax(0, predict(loess(pct_ ~ YEAR, span = 0.3))))
# Define custom colors
race_colors <- c(
"AI" = "#bdbfbf",  # American Indian
"AS" = "#808c73",  # Asian
"BL" = "#677812",  # Black
"HI" = "#e5de54",  # Hispanic
"HP" = "#a1a1a1",  # Pacific Islander
"MR" = "#303333",  # Multiracial
"WH" = "#0c4d1d"  # White
)
# Create interactive Plotly line chart
plot_ly(
data = smoothed_data,
x = ~YEAR,
y = ~Smoothed,
color = ~race,
colors = race_colors
# type = 'scatter',
# mode = 'lines'
) %>%
add_trace(
data = smoothed_data,
x = ~YEAR,
y = ~Smoothed,
color = ~race,
colors = race_colors,
type = 'scatter',
mode = 'lines',
showlegend = TRUE  # Hide duplicate legend entries
) %>%
layout(
title = paste("Suspension Rates in", selected_state()),
xaxis = list(title = "Year"),
yaxis = list(title = "Suspension Rate (%)"),
yaxis = list(range = c(0, NA)),
legend = list(title = list(text = "Race"))
)
})
tabPanel("State Timeline", plotlyOutput("state_plot", height = 500))  # âœ… Use `plotlyOutput()`
#install.packages("forecast")
library(forecast)
### ðŸ“Œ UI: Policy Selection Input
selectInput("policy", "Select Policy:", choices = c(
"No Change",
"Restorative Practices",
"Corporal Punishment Ban"
))
### ðŸ“Œ Reactive Prediction Calculation
output$policy_prediction <- renderText({
policy <- input$policy
predicted_disparities <- c("No Change" = 15, "Restorative Practices" = 10, "Corporal Punishment Ban" = 5)
paste0("Under the '", policy, "' policy, the predicted racial/ethnic disparity in discipline rates is ",
predicted_disparities[[policy]], "%.")
})
### ðŸ“Œ Filter Data for Non-Adopting States (DD == 0)
non_adopting_states <- df %>%
filter(DD == 0) %>%   # States that have NOT adopted the ban
group_by(STATE_CODE, YEAR) %>%
summarize(OSS_rate = mean(OSS_, na.rm = TRUE))  # Average suspension rate per year
###### State-Specific Trends Plotly Time Series
output$state_plot <- renderPlotly({
req(selected_state())  # Ensure a state is selected
# Filter data for selected state
state_data <- long_data %>% filter(STATE_CODE == selected_state())  # Match with STATE_CODE
state_data <- state_data %>%
mutate(pct_ = pmax(0, pct_))
# Create smoothed data
smoothed_data <- state_data %>%
group_by(race) %>%
mutate(Smoothed = pmax(0, predict(loess(pct_ ~ YEAR, span = 0.3))))
# Define custom colors
race_colors <- c(
"AI" = "#bdbfbf",  # American Indian
"AS" = "#808c73",  # Asian
"BL" = "#677812",  # Black
"HI" = "#e5de54",  # Hispanic
"HP" = "#a1a1a1",  # Pacific Islander
"MR" = "#303333",  # Multiracial
"WH" = "#0c4d1d"  # White
)
# Create interactive Plotly line chart
plot_ly(
data = smoothed_data,
x = ~YEAR,
y = ~Smoothed,
color = ~race,
colors = race_colors
# type = 'scatter',
# mode = 'lines'
) %>%
add_trace(
data = smoothed_data,
x = ~YEAR,
y = ~Smoothed,
color = ~race,
colors = race_colors,
type = 'scatter',
mode = 'lines',
showlegend = TRUE  # Hide duplicate legend entries
) %>%
layout(
title = paste("Suspension Rates in", selected_state()),
xaxis = list(title = "Year"),
yaxis = list(title = "Suspension Rate (%)"),
yaxis = list(range = c(0, NA)),
legend = list(title = list(text = "Race"))
)
})
# Load Libraries
library(flexdashboard)
library(shiny)
library(ggplot2)
library(dplyr)
library(leaflet)
library(plotly)
library(sf)
library(rio)
library(here)
library(tidyverse)
# ðŸ“Œ Load Data
df1 <- import(here("data/corp_76to20_bystate_MGyearrecoded.xlsx"))
df2 <- import(here("data/suspensions_72to21_bystate_MGyearrecoded.xlsx"))
df3 <- import(here("data/treatment_dataset_2year.xlsx"))
df1 <- import(here("data/corp_76to20_bystate_MGyearrecoded.xlsx"))
df2 <- import(here("data/suspensions_72to21_bystate_MGyearrecoded.xlsx"))
df3 <- import(here("data/treatment_dataset_2year.xlsx"))
# Load Libraries
library(flexdashboard)
library(shiny)
library(ggplot2)
library(dplyr)
library(leaflet)
library(plotly)
library(sf)
library(rio)
library(here)
library(tidyverse)
# ðŸ“Œ Load Data
df1 <- import(here("data/corp_76to20_bystate_MGyearrecoded.xlsx"))
df2 <- import(here("data/suspensions_72to21_bystate_MGyearrecoded.xlsx"))
df3 <- import(here("data/treatment dataset_2year.xlsx"))
# ðŸ“Œ Fix Missing State Names
state_lookup <- data.frame(STATE_CODE = state.abb, region = tolower(state.name))
# ðŸ“Œ Convert US states to `sf` object
us_states_sf <- st_as_sf(maps::map("state", fill = TRUE, plot = FALSE)) %>%
rename(region = ID) %>%
mutate(region = tolower(region)) %>%
st_transform(crs = 4326)  # Ensure correct CRS
# ðŸ“Œ Merge data with full state names
df1 <- left_join(df1, state_lookup, by = "STATE_CODE")
df1$region <- if_else(is.na(df1$region), "district of columbia", df1$region)
# ðŸ“Œ Ensure all geometries are valid
df_join <- left_join(us_states_sf, df1, by = "region") %>%
st_make_valid() %>%
filter(st_is_valid(.))  # Remove invalid geometries
# ðŸ“Œ Convert necessary columns to numeric
df1 <- df1 %>%
mutate(
ENR_ = as.numeric(ENR_),
CORP_ = as.numeric(CORP_),
Corporal_Rate = pmax(CORP_ / ENR_, 0) * 100
) %>%
replace_na(list(Corporal_Rate = 0))
# ðŸ“Œ Aggregate by year, state, and race
df_trend <- df1 %>%
group_by(YEAR, STATE_CODE, race) %>%
summarise(Corporal_Rate = mean(Corporal_Rate, na.rm = TRUE), .groups = "drop") %>%
mutate(Smoothed_Rate = pmax(0, predict(loess(Corporal_Rate ~ YEAR, span = 0.5, na.action = na.exclude))))
# ðŸ“Œ Define Race Colors
race_colors <- c(
"AI" = "#bdbfbf", "AS" = "#808c73", "BL" = "#677812",
"HI" = "#e5de54", "HP" = "#a1a1a1", "MR" = "#303333", "WH" = "#0c4d1d"
)
# Load Libraries
library(flexdashboard)
library(shiny)
library(ggplot2)
library(dplyr)
library(leaflet)
library(plotly)
library(sf)
library(rio)
library(here)
library(tidyverse)
# ðŸ“Œ Load Data
df1 <- import(here("data/corp_76to20_bystate_MGyearrecoded.xlsx"))
df2 <- import(here("data/suspensions_72to21_bystate_MGyearrecoded.xlsx"))
df3 <- import(here("data/treatment dataset_2year.xlsx"))
# ðŸ“Œ Fix Missing State Names
state_lookup <- data.frame(STATE_CODE = state.abb, region = tolower(state.name))
# ðŸ“Œ Convert US states to `sf` object
us_states_sf <- st_as_sf(maps::map("state", fill = TRUE, plot = FALSE)) %>%
rename(region = ID) %>%
mutate(region = tolower(region)) %>%
st_transform(crs = 4326)  # Ensure correct CRS
# ðŸ“Œ Merge data with full state names
df1 <- left_join(df1, state_lookup, by = "STATE_CODE")
df1$region <- if_else(is.na(df1$region), "district of columbia", df1$region)
# ðŸ“Œ Ensure all geometries are valid
df_join <- left_join(us_states_sf, df1, by = "region") %>%
st_make_valid() %>%
filter(st_is_valid(.))  # Remove invalid geometries
# ðŸ“Œ Convert necessary columns to numeric
df1 <- df1 %>%
mutate(
ENR_ = as.numeric(ENR_),
CORP_ = as.numeric(CORP_),
Corporal_Rate = pmax(CORP_ / ENR_, 0) * 100
) %>%
replace_na(list(Corporal_Rate = 0))
# ðŸ“Œ Aggregate by year, state, and race
df_trend <- df1 %>%
group_by(YEAR, STATE_CODE, race) %>%
summarise(Corporal_Rate = mean(Corporal_Rate, na.rm = TRUE), .groups = "drop") %>%
mutate(Smoothed_Rate = pmax(0, predict(loess(Corporal_Rate ~ YEAR, span = 0.5, na.action = na.exclude))))
# ðŸ“Œ Define Race Colors
race_colors <- c(
"AI" = "#bdbfbf", "AS" = "#808c73", "BL" = "#677812",
"HI" = "#e5de54", "HP" = "#a1a1a1", "MR" = "#303333", "WH" = "#0c4d1d"
)
# ðŸ“Œ UI Definition
ui <- fluidPage(
titlePanel("Corporal Punishment Ban Adoption and Trends"),
sidebarLayout(
sidebarPanel(
h3("Selected State Statistics"),
textOutput("selected_state"),
verbatimTextOutput("summary_stats")
),
mainPanel(
plotOutput("map", click = "map_click"),
plotlyOutput("state_trend")
)
)
)
# ðŸ“Œ Server Logic
server <- function(input, output, session) {
selected_state <- reactiveVal(NULL)
# ðŸ“Œ Generate Static Map
output$map <- renderPlot({
ggplot() +
geom_sf(data = df_join, aes(fill = as.factor(DD)), color = "white", size = 0.3) +
scale_fill_manual(values = c("0" = "#e5de54", "1" = "#808c73"), labels = c("Not Adopted", "Adopted")) +
theme_minimal() +
labs(title = "Corporal Punishment Ban Adoption by State", fill = "Ban Status") +
theme(axis.text = element_blank(), axis.ticks = element_blank(), panel.grid = element_blank())
})
# ðŸ“Œ Capture Click Event
observeEvent(input$map_click, {
req(input$map_click)
clicked_point <- st_sfc(st_point(c(input$map_click$x, input$map_click$y)), crs = st_crs(df_join)) %>%
st_as_sf()
nearest_state_index <- st_nearest_feature(clicked_point, df_join)
clicked_state <- df_join$region[nearest_state_index]
if (!is.null(clicked_state)) {
selected_state(clicked_state)
}
})
# ðŸ“Œ Display Selected State
output$selected_state <- renderText({
req(selected_state())
paste("Selected State:", selected_state())
})
# ðŸ“Œ Generate Summary Statistics
output$summary_stats <- renderPrint({
req(selected_state())
state_data <- df1 %>% filter(STATE_CODE == selected_state())
summary(state_data$Corporal_Rate)
})
# ðŸ“Œ Generate Interactive Trend Plot
output$state_trend <- renderPlotly({
req(selected_state())
state_data <- df_trend %>%
filter(toupper(STATE_CODE) == toupper(selected_state()))
plot_ly(state_data, x = ~YEAR, y = ~Smoothed_Rate, color = ~race, colors = race_colors, type = "scatter", mode = "lines") %>%
layout(title = paste("Corporal Punishment Rates in", selected_state()),
xaxis = list(title = "Year"),
yaxis = list(title = "Corporal Punishment Rate (%)", range = c(0, NA)),
legend = list(title = list(text = "Race")))
})
}
# Run Shiny App
shinyApp(ui, server)
# Load Libraries
library(flexdashboard)
library(shiny)
library(ggplot2)
library(dplyr)
library(leaflet)
library(plotly)
library(sf)
library(rio)
library(here)
library(tidyverse)
# ðŸ“Œ Load Data
df1 <- import(here("data/corp_76to20_bystate_MGyearrecoded.xlsx"))
df2 <- import(here("data/suspensions_72to21_bystate_MGyearrecoded.xlsx"))
df3 <- import(here("data/treatment dataset_2year.xlsx"))
# ðŸ“Œ Fix Missing State Names
state_lookup <- data.frame(STATE_CODE = state.abb, region = tolower(state.name))
# ðŸ“Œ Convert US states to `sf` object
us_states_sf <- st_as_sf(maps::map("state", fill = TRUE, plot = FALSE)) %>%
rename(region = ID) %>%
mutate(region = tolower(region)) %>%
st_transform(crs = 4326)  # Ensure correct CRS
# ðŸ“Œ Merge data with full state names
df1 <- left_join(df1, state_lookup, by = "STATE_CODE")
df1$region <- if_else(is.na(df1$region), "district of columbia", df1$region)
# ðŸ“Œ Ensure all geometries are valid
df_join <- left_join(us_states_sf, df1, by = "region") %>%
st_make_valid() %>%
filter(st_is_valid(.))  # Remove invalid geometries
# ðŸ“Œ Convert necessary columns to numeric
df1 <- df1 %>%
mutate(
ENR_ = as.numeric(ENR_),
CORP_ = as.numeric(CORP_),
Corporal_Rate = pmax(CORP_ / ENR_, 0) * 100
) %>%
replace_na(list(Corporal_Rate = 0))
# ðŸ“Œ Aggregate by year, state, and race
df_trend <- df1 %>%
group_by(YEAR, STATE_CODE, race) %>%
summarise(Corporal_Rate = mean(Corporal_Rate, na.rm = TRUE), .groups = "drop") %>%
mutate(Smoothed_Rate = pmax(0, predict(loess(Corporal_Rate ~ YEAR, span = 0.5, na.action = na.exclude))))
# ðŸ“Œ Define Race Colors
race_colors <- c(
"AI" = "#bdbfbf", "AS" = "#808c73", "BL" = "#677812",
"HI" = "#e5de54", "HP" = "#a1a1a1", "MR" = "#303333", "WH" = "#0c4d1d"
)
# ðŸ“Œ UI Definition
ui <- fluidPage(
titlePanel("Corporal Punishment Ban Adoption and Trends"),
sidebarLayout(
sidebarPanel(
h3("Selected State Statistics"),
textOutput("selected_state"),
verbatimTextOutput("summary_stats")
),
mainPanel(
plotOutput("map", click = "map_click"),
plotlyOutput("state_trend")
)
)
)
# ðŸ“Œ Server Logic
server <- function(input, output, session) {
selected_state <- reactiveVal(NULL)  # Store clicked state
# âœ… Fix: Place renderPlot inside server
output$map <- renderPlot({
ggplot() +
geom_sf(data = df_join, aes(fill = as.factor(DD)), color = "white", size = 0.3) +
scale_fill_manual(values = c("0" = "#e5de54", "1" = "#808c73"), labels = c("Not Adopted", "Adopted")) +
theme_minimal() +
labs(title = "Corporal Punishment Ban Adoption by State", fill = "Ban Status") +
theme(axis.text = element_blank(), axis.ticks = element_blank(), panel.grid = element_blank())
})
# âœ… Fix: Ensure `input$map_click` is used **inside observeEvent()**
observeEvent(input$map_click, {
req(input$map_click)  # Ensure click event exists
clicked_point <- st_sfc(st_point(c(input$map_click$x, input$map_click$y)), crs = st_crs(df_join))
clicked_point <- st_as_sf(clicked_point)
nearest_state_index <- st_nearest_feature(clicked_point, df_join)
clicked_state <- df_join$region[nearest_state_index]
if (!is.null(clicked_state)) {
selected_state(clicked_state)  # Store selected state
}
})
# âœ… Fix: Ensure selected state is displayed only if valid
output$selected_state <- renderText({
req(selected_state())
paste("Selected State:", selected_state())
})
# âœ… Fix: Ensure summary statistics only render after selection
output$summary_stats <- renderPrint({
req(selected_state())
state_data <- df1 %>% filter(STATE_CODE == selected_state())
summary(state_data$Corporal_Rate)
})
# âœ… Fix: Ensure plotly chart updates reactively
output$state_trend <- renderPlotly({
req(selected_state())
state_data <- df_trend %>% filter(toupper(STATE_CODE) == toupper(selected_state()))
plot_ly(state_data, x = ~YEAR, y = ~Smoothed_Rate, color = ~race, colors = race_colors, type = "scatter", mode = "lines") %>%
layout(title = paste("Corporal Punishment Rates in", selected_state()),
xaxis = list(title = "Year"),
yaxis = list(title = "Corporal Punishment Rate (%)", range = c(0, NA)),
legend = list(title = list(text = "Race")))
})
}
ui <- fluidPage(
titlePanel("Corporal Punishment Ban Adoption and Trends"),
sidebarLayout(
sidebarPanel(
h3("Selected State Statistics"),
textOutput("selected_state"),
verbatimTextOutput("summary_stats")
),
mainPanel(
plotOutput("map", click = "map_click"),  # âœ… Clickable Static Map
plotlyOutput("state_trend")  # âœ… Interactive Trend Plot
)
)
)
# Run Shiny App
shinyApp(ui, server)
