---
title: "Untitled"
author: "(enter your name)"
date: "2025-03-17"
output: html_document
---

```{r}
# Load Libraries
library(flexdashboard)
library(shiny)
library(ggplot2)
library(dplyr)
library(leaflet)
library(plotly)
library(sf)
library(rio)
library(here)
library(tidyverse)

# ðŸ“Œ Load Data
df1 <- import(here("data/corp_76to20_bystate_MGyearrecoded.xlsx"))
df2 <- import(here("data/suspensions_72to21_bystate_MGyearrecoded.xlsx"))
df3 <- import(here("data/treatment dataset_2year.xlsx"))

# ðŸ“Œ Fix Missing State Names
state_lookup <- data.frame(STATE_CODE = state.abb, region = tolower(state.name))

# ðŸ“Œ Convert US states to `sf` object
us_states_sf <- st_as_sf(maps::map("state", fill = TRUE, plot = FALSE)) %>%
  rename(region = ID) %>%
  mutate(region = tolower(region)) %>%
  st_transform(crs = 4326)  # Ensure correct CRS

# ðŸ“Œ Merge data with full state names
df1 <- left_join(df1, state_lookup, by = "STATE_CODE")
df1$region <- if_else(is.na(df1$region), "district of columbia", df1$region)

# ðŸ“Œ Ensure all geometries are valid
df_join <- left_join(us_states_sf, df1, by = "region") %>%
  st_make_valid() %>%
  filter(st_is_valid(.))  # Remove invalid geometries

# ðŸ“Œ Convert necessary columns to numeric
df1 <- df1 %>%
  mutate(
    ENR_ = as.numeric(ENR_),
    CORP_ = as.numeric(CORP_),
    Corporal_Rate = pmax(CORP_ / ENR_, 0) * 100
  ) %>%
  replace_na(list(Corporal_Rate = 0))

# ðŸ“Œ Aggregate by year, state, and race
df_trend <- df1 %>%
  group_by(YEAR, STATE_CODE, race) %>%
  summarise(Corporal_Rate = mean(Corporal_Rate, na.rm = TRUE), .groups = "drop") %>%
  mutate(Smoothed_Rate = pmax(0, predict(loess(Corporal_Rate ~ YEAR, span = 0.5, na.action = na.exclude))))

# ðŸ“Œ Define Race Colors
race_colors <- c(
  "AI" = "#bdbfbf", "AS" = "#808c73", "BL" = "#677812",
  "HI" = "#e5de54", "HP" = "#a1a1a1", "MR" = "#303333", "WH" = "#0c4d1d"
)

# ðŸ“Œ UI Definition
ui <- fluidPage(
  titlePanel("Corporal Punishment Ban Adoption and Trends"),
  
  sidebarLayout(
    sidebarPanel(
      h3("Selected State Statistics"),
      textOutput("selected_state"),
      verbatimTextOutput("summary_stats")
    ),
    
    mainPanel(
      plotOutput("map", click = "map_click"),  
      plotlyOutput("state_trend")  
    )
  )
)

# ðŸ“Œ Server Logic
server <- function(input, output, session) {
  
  selected_state <- reactiveVal(NULL)  # Store clicked state
  
  # âœ… Fix: Place renderPlot inside server
  output$map <- renderPlot({
    ggplot() +
      geom_sf(data = df_join, aes(fill = as.factor(DD)), color = "white", size = 0.3) +
      scale_fill_manual(values = c("0" = "#e5de54", "1" = "#808c73"), labels = c("Not Adopted", "Adopted")) +
      theme_minimal() +
      labs(title = "Corporal Punishment Ban Adoption by State", fill = "Ban Status") +
      theme(axis.text = element_blank(), axis.ticks = element_blank(), panel.grid = element_blank())
  })
  
  # âœ… Fix: Ensure `input$map_click` is used **inside observeEvent()**
observeEvent(input$map_click, {
  req(input$map_click)  # âœ… Prevents errors if no state is clicked

  clicked_point <- st_sfc(st_point(c(input$map_click$x, input$map_click$y)), crs = st_crs(df_join))
  clicked_point <- st_as_sf(clicked_point)  # Convert to sf object

  nearest_state_index <- st_nearest_feature(clicked_point, df_join)
  clicked_state <- df_join$region[nearest_state_index]

  if (!is.null(clicked_state)) {
    selected_state(clicked_state)  # âœ… Store selected state reactively
  } else {
    print("No state found for clicked point.")  # âœ… Debugging message
  }
})
  
  # âœ… Fix: Ensure selected state is displayed only if valid
  output$selected_state <- renderText({
    req(selected_state())
    paste("Selected State:", selected_state())
  })
  
  # âœ… Fix: Ensure summary statistics only render after selection
  output$summary_stats <- renderPrint({
    req(selected_state())
    state_data <- df1 %>% filter(STATE_CODE == selected_state())
    summary(state_data$Corporal_Rate)
  })}
  
  # âœ… Fix: Ensure plotly chart updates reactively
output$state_trend <- renderPlotly({
  req(selected_state())  # âœ… Ensures a state is selected

  state_data <- df_trend %>% filter(toupper(STATE_CODE) == toupper(selected_state()))

  if (nrow(state_data) == 0) {
    return(NULL)  # âœ… Prevents errors if no data exists
  }

  plot_ly(state_data, x = ~YEAR, y = ~Smoothed_Rate, color = ~race, 
          colors = race_colors, type = "scatter", mode = "lines") %>%
    layout(title = paste("Corporal Punishment Rates in", selected_state()),
           xaxis = list(title = "Year"),
           yaxis = list(title = "Corporal Punishment Rate (%)", range = c(0, NA)),
           legend = list(title = list(text = "Race")))
})
ui <- fluidPage(
  titlePanel("Corporal Punishment Ban Adoption and Trends"),
  
  sidebarLayout(
    sidebarPanel(
      h3("Selected State Statistics"),
      textOutput("selected_state"),
      verbatimTextOutput("summary_stats")
    ),
    
    mainPanel(
      plotOutput("map", click = "map_click"),  # âœ… Clickable Static Map
      plotlyOutput("state_trend")  # âœ… Interactive Trend Plot
    )
  )
)

# Run Shiny App
shinyApp(ui, server)
```

