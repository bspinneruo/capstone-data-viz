

# Merge df_corp with full state names
df_corp2 <- left_join(df2, state_lookup, by = "STATE_CODE")

# Fix DC missing in state mapping
df_corp2$region <- if_else(is.na(df_corp2$region), "district of columbia", df_corp2$region)

# Merge with map data
int_data <- left_join(us_states_sf, df_corp2, by = "region")
## Combined all -- us_states_sf2

### Pivot race wider 

int_data <- int_data %>%
  mutate(across(c(pct_, OSS_), ~ replace_na(.x, 0))) %>%  # Replace NA with 0 in selected columns
  pivot_wider(
    names_from = race,   # Convert race categories into column names
    values_from = pct_,  # Values to fill in new columns
    values_fill = list(pct_ = 0)) # replace na's with 0s
# Drop geometry column before summarization
# 
# int_data_clean <- int_data %>%
#   st_drop_geometry()  # Removes spatial geometry
# 
# int_data_clean <- int_data_clean %>%
#   group_by(region) %>%
#   summarise(Average_Suspensions = mean(total, na.rm = TRUE))
# 
# int_data <- left_join(int_data_clean, int_data, by = "region")
# 


long_data <- int_data %>%
  pivot_longer(cols = c(AI, AS, BL, HI, HP, MR, WH, total), names_to = "race", values_to = "pct_") %>% 
  group_by(YEAR, race, STATE_CODE)



# View transformed data
#head(int_data)

### Interactive map 
output$map <- renderLeaflet({
  leaflet(int_data, options = leafletOptions(zoomControl = FALSE, dragging = FALSE)) %>%
    
    addTiles() %>%
    
    # ✅ Set initial view to focus on the U.S.
    setView(lng = -98.5795, lat = 39.8283, zoom = 4) %>%  # Center at U.S. geographic center
    
    # ✅ Restrict users from moving outside the U.S.
    fitBounds(lng1 = -125, lat1 = 25, lng2 = -66, lat2 = 50) %>%
    
    addPolygons(
      fillColor = ~colorNumeric("Blues", int_data$total)(total),
      color = "white",
      weight = 1,
      fillOpacity = 0.8,
      highlightOptions = highlightOptions(weight = 3, color = "#666", fillOpacity = 0.9),
      label = ~paste0(region, ": ", round(total, 2), "% Avg. Overall Suspended"),
      layerId = ~STATE_CODE  # Use STATE_CODE instead of region
    )
})

leafletOutput("map", height = 600)

library(dplyr)
library(sf)

# Drop geometry column before summarization
int_data_clean <- int_data %>%
  st_drop_geometry()  # Removes spatial geometry



```

```{r}


########################################################
### Observe Click on Map (Dynamically Updates Timeline)

observeEvent(input$map_shape_click, {
  print(input$map_shape_click)  # check if this captures a state
  clicked_state <- input$map_shape_click$id  # Get the clicked state name
  
  if (!is.null(clicked_state)) {
    print(paste("Clicked State:", clicked_state))  # print clicked state
    selected_state(clicked_state)  # Store clicked state in reactive value
    updateTabsetPanel(session, "main_tabs", selected = "State Timeline")
  }
})
```

```{r}


###### State-Specific Trends Plotly Time Series 
output$state_plot <- renderPlotly({
  req(selected_state())  # Ensure a state is selected
  
  # Filter data for selected state
  state_data <- long_data %>% filter(STATE_CODE == selected_state())  # Match with STATE_CODE
  
  state_data <- state_data %>%
    mutate(pct_ = pmax(0, pct_)) 
  
  # Create smoothed data
  smoothed_data <- state_data %>%
    group_by(race) %>%
    mutate(Smoothed = pmax(0, predict(loess(pct_ ~ YEAR, span = 0.3))))
  
  # Define custom colors
  race_colors <- c(
    "AI" = "#bdbfbf",  # American Indian
    "AS" = "#808c73",  # Asian
    "BL" = "#677812",  # Black
    "HI" = "#e5de54",  # Hispanic
    "HP" = "#a1a1a1",  # Pacific Islander
    "MR" = "#303333",  # Multiracial
    "WH" = "#0c4d1d"  # White
  )
  
  
  # Create interactive Plotly line chart
  plot_ly(
    data = smoothed_data, 
    x = ~YEAR, 
    y = ~Smoothed, 
    color = ~race, 
    colors = race_colors
    # type = 'scatter', 
    # mode = 'lines'
  ) %>%
    add_trace(
      data = smoothed_data, 
      x = ~YEAR, 
      y = ~Smoothed, 
      color = ~race, 
      colors = race_colors,
      type = 'scatter', 
      mode = 'lines',
      showlegend = TRUE  # Hide duplicate legend entries
    ) %>%
    layout(
      title = paste("Suspension Rates in", selected_state()),
      xaxis = list(title = "Year"),
      yaxis = list(title = "Suspension Rate (%)"),
      yaxis = list(range = c(0, NA)), 
      legend = list(title = list(text = "Race"))
    )
})

plotlyOutput("state_plot", height = 500)