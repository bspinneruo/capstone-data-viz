forecast_plot <- renderPlotly({
ts_data <- ts(suspension_rates$Black, start = 1970, frequency = 1)
model <- auto.arima(ts_data)
forecasted <- forecast(model, h = 10)
forecast_df <- data.frame(
Year = seq(2021, 2030, by = 1),
Predicted = forecasted$mean
)
plot_ly() %>%
add_lines(x = suspension_rates$Year, y = suspension_rates$Black, name = "Actual", line = list(color = "blue")) %>%
add_lines(x = forecast_df$Year, y = forecast_df$Predicted, name = "Forecast", line = list(color = "red")) %>%
layout(title = "Suspension Rate Forecast",
xaxis = list(title = "Year"),
yaxis = list(title = "Suspension Rate (%)"))
})
plotlyOutput("forecast_plot")
library(flexdashboard)
library(shiny)
library(ggplot2)
library(tidyr)
library(dplyr)
library(leaflet)
library(plotly)
library(rio)
library(DT)
# Brand colors
brand_colors <- list(
dark_gray = "#303333",  # PMS 179-15-C
yellow = "#e5de54",     # PMS 1-15 C
sage = "#808c73",       # PMS 178-8 C
gray = "#a1a1a1",       # PMS 179-7 C
light_gray = "#bdbfbf"  # PMS 175-2 C
)
# Brand theme for ggplot
theme_brand <- function(base_size = 12) {
theme_minimal(base_size = base_size) %+replace%
theme(
text = element_text(family = "Seaford"),
plot.title = element_text(size = rel(1.2), face = "bold"),
plot.subtitle = element_text(size = rel(1)),
axis.title = element_text(face = "bold"),
panel.grid.major = element_line(color = brand_colors$light_gray),
panel.grid.minor = element_blank(),
legend.position = "bottom"
)
}
library(here)
df1 <- import(here("data/corp_76to20_bystate_MGyearrecoded.xlsx"))
df2 <- import(here("data/suspensions_72to21_bystate_MGyearrecoded.xlsx"))
df3 <- import(here("data/treatment dataset_2year.xlsx"))
# Filter for states adopting bans in 2020+
df_corp <- df3 %>%
filter(YEAR > 2020) %>%
group_by(STATE_CODE)
# Load US states map
library(maps)
us_states <- map_data("state")
us_states$region <- tolower(us_states$region)
# Create lookup for state names & abbreviations
state_lookup <- data.frame(STATE_CODE = state.abb, region = tolower(state.name))
df_corp <- left_join(df_corp, state_lookup, by = "STATE_CODE")
# Fix DC missing in state mapping
df_corp$region <- if_else(is.na(df_corp$region), "district of columbia", df_corp$region)
# Merge with map data
us_states <- left_join(us_states, df_corp, by = "region")
color_palette <- c("0" = brand_colors$yellow, "1" = brand_colors$dark_gray)
ggplot() +
geom_polygon(
data = us_states,
aes(x = long, y = lat, group = group, fill = as.factor(DD)),
color = "white", size = 0.3
) +
scale_fill_manual(values = color_palette, labels = c("Not Adopted", "Adopted")) +
theme_minimal() +
labs(
title = "Corporal Punishment Ban Adoption by State",
subtitle = "States that adopted bans starting in 2020",
fill = "Ban Status"
) +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
observeEvent(input$map_shape_click, {
selected_state <- input$map_shape_click$id  # Get state name from click event
output$state_plot <- renderPlot({
# Filter data for selected state
state_data <- df2 %>% filter(region == selected_state)
ggplot(state_data, aes(x = YEAR, y = SuspensionRate, group = Race, color = Race)) +
geom_line(alpha = 0.6) +
geom_smooth(method = "loess", se = FALSE, span = 0.7) +
scale_color_manual(values = c(
"AI" = brand_colors$light_gray,
"BL" = brand_colors$sage,
"WH" = brand_colors$dark_gray
)) +
theme_brand() +
labs(
title = paste("Suspension Rates in", selected_state),
x = "Year",
y = "Suspension Rates (%)"
)
})
})
# Placeholder when no state is clicked
output$state_plot <- renderPlot({
ggplot() + theme_void() +
labs(title = "Click a state to view its discipline timeline")
})
library(shiny)
library(ggplot2)
library(dplyr)
# Define UI with a sidebar layout
shinyServer(function(input, output, session) {
# Observe when a state is clicked
observeEvent(input$map_shape_click, {
selected_state <- input$map_shape_click$id  # Get state name from click event
# Create a plot output dynamically
output$state_plot <- renderPlot({
# Filter data for selected state
state_data <- df2 %>% filter(region == selected_state)
ggplot(state_data, aes(x = YEAR, y = SuspensionRate, group = Race, color = Race)) +
geom_line(alpha = 0.6) +
geom_smooth(method = "loess", se = FALSE, span = 0.7) +
scale_color_manual(values = c(
"AI" = brand_colors$light_gray,
"BL" = brand_colors$sage,
"WH" = brand_colors$dark_gray
)) +
theme_brand() +
labs(
title = paste("Suspension Rates in", selected_state),
x = "Year",
y = "Suspension Rates (%)"
)
})
})
# Placeholder when no state is clicked
output$state_plot <- renderPlot({
ggplot() + theme_void() +
labs(title = "Click a state to view its discipline timeline")
})
})
library(here)
df1 <- import(here("data/corp_76to20_bystate_MGyearrecoded.xlsx"))
df2 <- import(here("data/suspensions_72to21_bystate_MGyearrecoded.xlsx"))
df3 <- import(here("data/treatment dataset_2year.xlsx"))
library(sf)
# Convert US states to an sf object
us_states_sf <- st_as_sf(maps::map("state", fill = TRUE, plot = FALSE))
# Ensure the column for joining is named "region"
us_states_sf$region <- tolower(us_states_sf$ID)  # Convert to lowercase to match df_corp
# Merge with df_corp data
df_corp <- df_corp %>%
rename(region = STATE_CODE)  # Ensure consistent naming
View(df_corp)
View(us_states_sf)
View(us_states)
View(us_states_sf)
View(us_states_sf)
View(df_corp)
library(here)
df1 <- import(here("data/corp_76to20_bystate_MGyearrecoded.xlsx"))
df2 <- import(here("data/suspensions_72to21_bystate_MGyearrecoded.xlsx"))
df3 <- import(here("data/treatment dataset_2year.xlsx"))
library(sf)
# Filter for states adopting bans in 2020+
df_corp <- df3 %>%
filter(YEAR > 2020) %>%
group_by(STATE_CODE)
# Convert US states to an sf object
us_states_sf <- st_as_sf(maps::map("state", fill = TRUE, plot = FALSE))
# Ensure the column for joining is named "region"
us_states_sf$region <- tolower(us_states_sf$ID)  # Convert to lowercase to match df_corp
# Merge with df_corp data
df_corp <- df_corp %>%
rename(region = STATE_CODE)  # Ensure consistent naming
us_states_sf <- left_join(us_states_sf, df_corp, by = "region")
# Define color palette
color_palette <- c("0" = brand_colors$yellow, "1" = brand_colors$dark_gray)
# Shiny server function
shinyServer(function(input, output, session) {
# Render interactive leaflet map
output$map <- renderLeaflet({
leaflet(us_states_sf) %>%
addTiles() %>%
addPolygons(
fillColor = ~color_palette[as.character(DD)],  # Map DD to colors
color = "white",
weight = 1,
fillOpacity = 0.8,
highlightOptions = highlightOptions(
weight = 3, color = "#666", fillOpacity = 0.9, bringToFront = TRUE
),
label = ~paste0(region, ": ", ifelse(DD == 1, "Adopted", "Not Adopted")),
layerId = ~region  # Enables click functionality
)
})
})
# Shiny server function
shinyServer(function(input, output, session) {
# Render interactive leaflet map
output$map <- renderLeaflet({
leaflet(us_states_sf) %>%
addTiles() %>%
addPolygons(
fillColor = ~color_palette[as.character(DD)],  # Map DD to colors
color = "white",
weight = 1,
fillOpacity = 0.8,
highlightOptions = highlightOptions(
weight = 3, color = "#666", fillOpacity = 0.9, bringToFront = TRUE
),
label = ~paste0(region, ": ", ifelse(DD == 1, "Adopted", "Not Adopted")),
layerId = ~region  # Enables click functionality
)
})
})
color_palette <- c("0" = brand_colors$yellow, "1" = brand_colors$dark_gray)
ggplot() +
geom_polygon(
data = us_states_sf,
aes(x = long, y = lat, group = group, fill = as.factor(DD)),
color = "white", size = 0.3
) +
scale_fill_manual(values = color_palette, labels = c("Not Adopted", "Adopted")) +
theme_minimal() +
labs(
title = "Corporal Punishment Ban Adoption by State",
subtitle = "States that adopted bans starting in 2020",
fill = "Ban Status"
) +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
View(us_states_sf)
library(shiny); runApp('code/shiny_capstone.R')
library(flexdashboard)
library(shiny)
library(ggplot2)
library(dplyr)
library(leaflet)
library(sf)
library(rio)
library(here)
# Load Data
df1 <- import(here("data/corp_76to20_bystate_MGyearrecoded.xlsx"))
df2 <- import(here("data/suspensions_72to21_bystate_MGyearrecoded.xlsx"))
df3 <- import(here("data/treatment dataset_2year.xlsx"))
# Filter for states adopting bans in 2020+
df_corp <- df3 %>%
filter(YEAR > 2020) %>%
group_by(STATE_CODE)
# Convert US states to an sf object
us_states_sf <- st_as_sf(maps::map("state", fill = TRUE, plot = FALSE))
# Fix column names for merging
us_states_sf <- us_states_sf %>%
rename(region = ID) %>%
mutate(region = tolower(region))
# Create state lookup for abbreviations
state_lookup <- data.frame(STATE_CODE = state.abb, region = tolower(state.name))
# Merge df_corp with full state names
df_corp <- left_join(df_corp, state_lookup, by = "STATE_CODE")
# Fix DC missing in state mapping
df_corp$region <- if_else(is.na(df_corp$region), "district of columbia", df_corp$region)
# Merge with map data
us_states_sf <- left_join(us_states_sf, df_corp, by = "region")
# Define color palette
color_palette <- list("0" = "#e5de54", "1" = "#808c73")
### Static Map
renderPlot({
ggplot() +
geom_sf(data = us_states_sf, aes(fill = as.factor(DD)), color = "white", size = 0.3) +
scale_fill_manual(values = color_palette, labels = c("Not Adopted", "Adopted")) +
theme_minimal() +
labs(
title = "Corporal Punishment Ban Adoption by State",
subtitle = "States that adopted bans starting in 2020",
fill = "Ban Status"
) +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
})
# Chunk 1
library(flexdashboard)
library(shiny)
library(ggplot2)
library(dplyr)
library(leaflet)
library(sf)
library(rio)
library(here)
# Load Data
df1 <- import(here("data/corp_76to20_bystate_MGyearrecoded.xlsx"))
df2 <- import(here("data/suspensions_72to21_bystate_MGyearrecoded.xlsx"))
df3 <- import(here("data/treatment dataset_2year.xlsx"))
# Filter for states adopting bans in 2020+
df_corp <- df3 %>%
filter(YEAR > 2020) %>%
group_by(STATE_CODE)
# Convert US states to an sf object
us_states_sf <- st_as_sf(maps::map("state", fill = TRUE, plot = FALSE))
# Fix column names for merging
us_states_sf <- us_states_sf %>%
rename(region = ID) %>%
mutate(region = tolower(region))
# Create state lookup for abbreviations
state_lookup <- data.frame(STATE_CODE = state.abb, region = tolower(state.name))
# Merge df_corp with full state names
df_corp <- left_join(df_corp, state_lookup, by = "STATE_CODE")
# Fix DC missing in state mapping
df_corp$region <- if_else(is.na(df_corp$region), "district of columbia", df_corp$region)
# Merge with map data
us_states_sf <- left_join(us_states_sf, df_corp, by = "region")
# Define color palette
color_palette <- list("0" = "#e5de54", "1" = "#808c73")
# Chunk 2
### Static Map
renderPlot({
ggplot() +
geom_sf(data = us_states_sf, aes(fill = as.factor(DD)), color = "white", size = 0.3) +
scale_fill_manual(values = color_palette, labels = c("Not Adopted", "Adopted")) +
theme_minimal() +
labs(
title = "Corporal Punishment Ban Adoption by State",
subtitle = "States that adopted bans starting in 2020",
fill = "Ban Status"
) +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
})
# Chunk 3
### Interactive map
output$map <- renderLeaflet({
leaflet(us_states_sf) %>%
addTiles() %>%
addPolygons(
fillColor = ~color_palette[as.character(DD)],
color = "white",
weight = 1,
fillOpacity = 0.8,
highlightOptions = highlightOptions(weight = 3, color = "#666", fillOpacity = 0.9),
label = ~paste0(region, ": ", ifelse(DD == 1, "Adopted", "Not Adopted")),
layerId = ~region  # Enables click functionality
)
})
### Static Map
renderPlot({
ggplot() +
geom_sf(data = us_states_sf, aes(fill = as.factor(DD)), size = 0.3) +
scale_fill_manual(values = color_palette, labels = c("Not Adopted", "Adopted")) +
theme_minimal() +
labs(
title = "Corporal Punishment Ban Adoption by State",
subtitle = "States that adopted bans starting in 2020",
fill = "Ban Status"
) +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
})
# Chunk 1
library(flexdashboard)
library(shiny)
library(ggplot2)
library(dplyr)
library(leaflet)
library(sf)
library(rio)
library(here)
# Load Data
df1 <- import(here("data/corp_76to20_bystate_MGyearrecoded.xlsx"))
df2 <- import(here("data/suspensions_72to21_bystate_MGyearrecoded.xlsx"))
df3 <- import(here("data/treatment dataset_2year.xlsx"))
# Filter for states adopting bans in 2020+
df_corp <- df3 %>%
filter(YEAR > 2020) %>%
group_by(STATE_CODE)
# Convert US states to an sf object
us_states_sf <- st_as_sf(maps::map("state", fill = TRUE, plot = FALSE))
# Fix column names for merging
us_states_sf <- us_states_sf %>%
rename(region = ID) %>%
mutate(region = tolower(region))
# Create state lookup for abbreviations
state_lookup <- data.frame(STATE_CODE = state.abb, region = tolower(state.name))
# Merge df_corp with full state names
df_corp <- left_join(df_corp, state_lookup, by = "STATE_CODE")
# Fix DC missing in state mapping
df_corp$region <- if_else(is.na(df_corp$region), "district of columbia", df_corp$region)
# Merge with map data
us_states_sf <- left_join(us_states_sf, df_corp, by = "region")
# Define color palette
color_palette <- list("0" = "#e5de54", "1" = "#808c73")
selected_state <- reactiveVal(NULL)
### Static Map
renderPlot({
ggplot() +
geom_sf(data = us_states_sf, aes(fill = as.factor(DD)), size = 0.3) +
scale_fill_manual(values = color_palette, labels = c("Not Adopted", "Adopted")) +
theme_minimal() +
labs(
title = "Corporal Punishment Ban Adoption by State",
subtitle = "States that adopted bans starting in 2020",
fill = "Ban Status"
) +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
})
# Chunk 1
library(flexdashboard)
library(shiny)
library(ggplot2)
library(dplyr)
library(leaflet)
library(sf)
library(rio)
library(here)
# Load Data
df1 <- import(here("data/corp_76to20_bystate_MGyearrecoded.xlsx"))
df2 <- import(here("data/suspensions_72to21_bystate_MGyearrecoded.xlsx"))
df3 <- import(here("data/treatment dataset_2year.xlsx"))
# Filter for states adopting bans in 2020+
df_corp <- df3 %>%
filter(YEAR > 2020) %>%
group_by(STATE_CODE)
# Convert US states to an sf object
us_states_sf <- st_as_sf(maps::map("state", fill = TRUE, plot = FALSE))
# Fix column names for merging
us_states_sf <- us_states_sf %>%
rename(region = ID) %>%
mutate(region = tolower(region))
# Create state lookup for abbreviations
state_lookup <- data.frame(STATE_CODE = state.abb, region = tolower(state.name))
# Merge df_corp with full state names
df_corp <- left_join(df_corp, state_lookup, by = "STATE_CODE")
# Fix DC missing in state mapping
df_corp$region <- if_else(is.na(df_corp$region), "district of columbia", df_corp$region)
# Merge with map data
us_states_sf <- left_join(us_states_sf, df_corp, by = "region")
# Define color palette
color_palette <- list("0" = "#e5de54", "1" = "#808c73")
selected_state <- reactiveVal(NULL)
# Chunk 2
### Static Map
renderPlot({
ggplot() +
geom_sf(data = us_states_sf, aes(fill = as.factor(DD)), color = "white", size = 0.3) +
scale_fill_manual(values = color_palette, labels = c("Not Adopted", "Adopted")) +
theme_minimal() +
labs(
title = "Corporal Punishment Ban Adoption by State",
subtitle = "States that adopted bans starting in 2020",
fill = "Ban Status"
) +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
})
# Chunk 3
### Interactive map
output$map <- renderLeaflet({
leaflet(us_states_sf) %>%
addTiles() %>%
addPolygons( stroke = FALSE, smoothFactor = 0,
fillColor = ~color_palette[as.character(DD)],
color = "white",
weight = 1,
fillOpacity = 0.8,
highlightOptions = highlightOptions(weight = 3, color = "#666", fillOpacity = 0.9),
label = ~paste0(region, ": ", ifelse(DD == 1, "Adopted", "Not Adopted")),
layerId = ~region  # Enables click functionality
)
})
# Merge df_corp with full state names
df_corp2 <- left_join(df2, state_lookup, by = "STATE_CODE")
# Fix DC missing in state mapping
df_corp2$region <- if_else(is.na(df_corp2$region), "district of columbia", df_corp2$region)
# Merge with map data
us_states_sf2 <- left_join(us_states_sf, df_corp2, by = "region")
View(us_states_sf2)
### Interactive map
output$map <- renderLeaflet({
leaflet(us_states_sf2) %>%
addTiles() %>%
addPolygons( stroke = FALSE, smoothFactor = 0,
fillColor = ~color_palette[as.character(DD)],
color = "white",
weight = 1,
fillOpacity = 0.8,
highlightOptions = highlightOptions(weight = 3, color = "#666", fillOpacity = 0.9),
label = ~paste0(region, ": ", ifelse(DD == 1, "Adopted", "Not Adopted")),
layerId = ~region  # Enables click functionality
)
})
View(us_states_sf2)
