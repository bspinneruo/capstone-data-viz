{
    "type": [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        0,
        1,
        3,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        2,
        2,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2
    ],
    "data": [
        "  labs(",
        "+ ",
        "    title = \"Corporal Punishment Ban Adoption by State\",",
        "+ ",
        "    subtitle = \"States that adopted bans starting in 2020\",",
        "+ ",
        "    fill = \"Ban Status\"",
        "+ ",
        "  ) +",
        "+ ",
        "  theme(",
        "+ ",
        "    axis.text = element_blank(),",
        "+ ",
        "    axis.ticks = element_blank(),",
        "+ ",
        "    panel.grid = element_blank()",
        "+ ",
        "  )",
        "Warning message:\n\u001B[38;5;232mUsing `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n\u001B[36mℹ\u001B[38;5;232m Please use `linewidth` instead.\n\u001B[90mThis warning is displayed once every 8 hours.\u001B[38;5;232m\n\u001B[90mCall `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\u001B[38;5;232m\u001B[39m \n",
        "> ",
        "observeEvent(input$map_shape_click, {",
        "+ ",
        "  selected_state <- input$map_shape_click$id  # Get state name from click event",
        "+ ",
        "  output$state_plot <- renderPlot({",
        "+ ",
        "    ",
        "+ ",
        "    # Filter data for selected state",
        "+ ",
        "    state_data <- df2 %>% filter(region == selected_state)",
        "+ ",
        "    ",
        "+ ",
        "    ggplot(state_data, aes(x = YEAR, y = SuspensionRate, group = Race, color = Race)) +",
        "+ ",
        "      geom_line(alpha = 0.6) + ",
        "+ ",
        "      geom_smooth(method = \"loess\", se = FALSE, span = 0.7) +",
        "+ ",
        "      scale_color_manual(values = c(",
        "+ ",
        "        \"AI\" = brand_colors$light_gray, ",
        "+ ",
        "        \"BL\" = brand_colors$sage, ",
        "+ ",
        "        \"WH\" = brand_colors$dark_gray",
        "+ ",
        "      )) +",
        "+ ",
        "      theme_brand() + ",
        "+ ",
        "      labs(",
        "+ ",
        "        title = paste(\"Suspension Rates in\", selected_state),",
        "+ ",
        "        x = \"Year\",",
        "+ ",
        "        y = \"Suspension Rates (%)\"",
        "+ ",
        "      )",
        "+ ",
        "  })",
        "+ ",
        "})",
        "> ",
        "> ",
        "# Placeholder when no state is clicked",
        "> ",
        "output$state_plot <- renderPlot({",
        "+ ",
        "  ggplot() + theme_void() + ",
        "+ ",
        "    labs(title = \"Click a state to view its discipline timeline\")",
        "+ ",
        "})",
        "Error: object 'output' not found\n",
        "> ",
        "library(shiny)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dplyr)",
        "> ",
        "> ",
        "# Define UI with a sidebar layout",
        "> ",
        "shinyServer(function(input, output, session) {",
        "+ ",
        "  ",
        "+ ",
        "  # Observe when a state is clicked",
        "+ ",
        "  observeEvent(input$map_shape_click, {",
        "+ ",
        "    selected_state <- input$map_shape_click$id  # Get state name from click event",
        "+ ",
        "    ",
        "+ ",
        "    # Create a plot output dynamically",
        "+ ",
        "    output$state_plot <- renderPlot({",
        "+ ",
        "      ",
        "+ ",
        "      # Filter data for selected state",
        "+ ",
        "      state_data <- df2 %>% filter(region == selected_state)",
        "+ ",
        "      ",
        "+ ",
        "      ggplot(state_data, aes(x = YEAR, y = SuspensionRate, group = Race, color = Race)) +",
        "+ ",
        "        geom_line(alpha = 0.6) + ",
        "+ ",
        "        geom_smooth(method = \"loess\", se = FALSE, span = 0.7) +",
        "+ ",
        "        scale_color_manual(values = c(",
        "+ ",
        "          \"AI\" = brand_colors$light_gray, ",
        "+ ",
        "          \"BL\" = brand_colors$sage, ",
        "+ ",
        "          \"WH\" = brand_colors$dark_gray",
        "+ ",
        "        )) +",
        "+ ",
        "        theme_brand() + ",
        "+ ",
        "        labs(",
        "+ ",
        "          title = paste(\"Suspension Rates in\", selected_state),",
        "+ ",
        "          x = \"Year\",",
        "+ ",
        "          y = \"Suspension Rates (%)\"",
        "+ ",
        "        )",
        "+ ",
        "    })",
        "+ ",
        "  })",
        "+ ",
        "  ",
        "+ ",
        "  # Placeholder when no state is clicked",
        "+ ",
        "  output$state_plot <- renderPlot({",
        "+ ",
        "    ggplot() + theme_void() + ",
        "+ ",
        "      labs(title = \"Click a state to view its discipline timeline\")",
        "+ ",
        "  })",
        "+ ",
        "})",
        "> ",
        "library(here)",
        "> ",
        "df1 <- import(here(\"data/corp_76to20_bystate_MGyearrecoded.xlsx\"))",
        "\r-\r/\r                                                                                           \r\r/\r                                                                                           \r\r-\r                                                                                           \r",
        "> ",
        "df2 <- import(here(\"data/suspensions_72to21_bystate_MGyearrecoded.xlsx\"))",
        "\r-\r/\r                                                                                           \r\r/\r                                                                                           \r\r-\r                                                                                           \r",
        "> ",
        "df3 <- import(here(\"data/treatment dataset_2year.xlsx\"))",
        "\r-\r/\r                                                                                           \r\r/\r                                                                                           \r\r-\r                                                                                           \r",
        "> ",
        "> ",
        "library(sf)",
        "Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n",
        "> ",
        "> ",
        "> ",
        "# Convert US states to an sf object",
        "> ",
        "us_states_sf <- st_as_sf(maps::map(\"state\", fill = TRUE, plot = FALSE))",
        "> ",
        "> ",
        "# Ensure the column for joining is named \"region\"",
        "> ",
        "us_states_sf$region <- tolower(us_states_sf$ID)  # Convert to lowercase to match df_corp",
        "> ",
        "> ",
        "# Merge with df_corp data",
        "> ",
        "df_corp <- df_corp %>%",
        "+ ",
        "  rename(region = STATE_CODE)  # Ensure consistent naming",
        "\u001B[1m\u001B[33mError\u001B[39m in `rename()`:\u001B[22m\n\u001B[33m!\u001B[39m Names must be unique.\n\u001B[31m✖\u001B[39m These names are duplicated:\n  * \"region\" at locations 2 and 5.\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "View(df_corp)",
        "> ",
        "View(us_states_sf)",
        "> ",
        "View(us_states)",
        "> ",
        "View(us_states_sf)",
        "> ",
        "View(us_states_sf)",
        "> ",
        "View(df_corp)",
        "> ",
        "library(here)",
        "> ",
        "df1 <- import(here(\"data/corp_76to20_bystate_MGyearrecoded.xlsx\"))",
        "\r-\r/\r                                                                                           \r\r/\r                                                                                           \r\r-\r                                                                                           \r",
        "> ",
        "df2 <- import(here(\"data/suspensions_72to21_bystate_MGyearrecoded.xlsx\"))",
        "\r-\r/\r                                                                                           \r\r/\r                                                                                           \r\r-\r                                                                                           \r",
        "> ",
        "df3 <- import(here(\"data/treatment dataset_2year.xlsx\"))",
        "\r-\r/\r                                                                                           \r\r/\r                                                                                           \r\r-\r                                                                                           \r",
        "> ",
        "> ",
        "library(sf)",
        "> ",
        "# Filter for states adopting bans in 2020+",
        "> ",
        "df_corp <- df3 %>%",
        "+ ",
        "  filter(YEAR > 2020) %>%",
        "+ ",
        "  group_by(STATE_CODE)",
        "> ",
        "> ",
        "# Convert US states to an sf object",
        "> ",
        "us_states_sf <- st_as_sf(maps::map(\"state\", fill = TRUE, plot = FALSE))",
        "> ",
        "> ",
        "# Ensure the column for joining is named \"region\"",
        "> ",
        "us_states_sf$region <- tolower(us_states_sf$ID)  # Convert to lowercase to match df_corp",
        "> ",
        "> ",
        "# Merge with df_corp data",
        "> ",
        "df_corp <- df_corp %>%",
        "+ ",
        "  rename(region = STATE_CODE)  # Ensure consistent naming",
        "> ",
        "us_states_sf <- left_join(us_states_sf, df_corp, by = \"region\")",
        "> ",
        "> ",
        "# Define color palette",
        "> ",
        "color_palette <- c(\"0\" = brand_colors$yellow, \"1\" = brand_colors$dark_gray)",
        "> ",
        "> ",
        "# Shiny server function",
        "> ",
        "shinyServer(function(input, output, session) {",
        "+ ",
        "  ",
        "+ ",
        "  # Render interactive leaflet map",
        "+ ",
        "  output$map <- renderLeaflet({",
        "+ ",
        "    leaflet(us_states_sf) %>%",
        "+ ",
        "      addTiles() %>%",
        "+ ",
        "      addPolygons(",
        "+ ",
        "        fillColor = ~color_palette[as.character(DD)],  # Map DD to colors",
        "+ ",
        "        color = \"white\",",
        "+ ",
        "        weight = 1,",
        "+ ",
        "        fillOpacity = 0.8,",
        "+ ",
        "        highlightOptions = highlightOptions(",
        "+ ",
        "          weight = 3, color = \"#666\", fillOpacity = 0.9, bringToFront = TRUE",
        "+ ",
        "        ),",
        "+ ",
        "        label = ~paste0(region, \": \", ifelse(DD == 1, \"Adopted\", \"Not Adopted\")),",
        "+ ",
        "        layerId = ~region  # Enables click functionality",
        "+ ",
        "      )",
        "+ ",
        "  })",
        "+ ",
        "})",
        "> ",
        "# Shiny server function",
        "> ",
        "shinyServer(function(input, output, session) {",
        "+ ",
        "  ",
        "+ ",
        "  # Render interactive leaflet map",
        "+ ",
        "  output$map <- renderLeaflet({",
        "+ ",
        "    leaflet(us_states_sf) %>%",
        "+ ",
        "      addTiles() %>%",
        "+ ",
        "      addPolygons(",
        "+ ",
        "        fillColor = ~color_palette[as.character(DD)],  # Map DD to colors",
        "+ ",
        "        color = \"white\",",
        "+ ",
        "        weight = 1,",
        "+ ",
        "        fillOpacity = 0.8,",
        "+ ",
        "        highlightOptions = highlightOptions(",
        "+ ",
        "          weight = 3, color = \"#666\", fillOpacity = 0.9, bringToFront = TRUE",
        "+ ",
        "        ),",
        "+ ",
        "        label = ~paste0(region, \": \", ifelse(DD == 1, \"Adopted\", \"Not Adopted\")),",
        "+ ",
        "        layerId = ~region  # Enables click functionality",
        "+ ",
        "      )",
        "+ ",
        "  })",
        "+ ",
        "})",
        "> ",
        "color_palette <- c(\"0\" = brand_colors$yellow, \"1\" = brand_colors$dark_gray)",
        "> ",
        "> ",
        "ggplot() +",
        "+ ",
        "  geom_polygon(",
        "+ ",
        "    data = us_states_sf,",
        "+ ",
        "    aes(x = long, y = lat, group = group, fill = as.factor(DD)),",
        "+ ",
        "    color = \"white\", size = 0.3",
        "+ ",
        "  ) +",
        "+ ",
        "  scale_fill_manual(values = color_palette, labels = c(\"Not Adopted\", \"Adopted\")) +",
        "+ ",
        "  theme_minimal() +",
        "+ ",
        "  labs(",
        "+ ",
        "    title = \"Corporal Punishment Ban Adoption by State\",",
        "+ ",
        "    subtitle = \"States that adopted bans starting in 2020\",",
        "+ ",
        "    fill = \"Ban Status\"",
        "+ ",
        "  ) +",
        "+ ",
        "  theme(",
        "+ ",
        "    axis.text = element_blank(),",
        "+ ",
        "    axis.ticks = element_blank(),",
        "+ ",
        "    panel.grid = element_blank()",
        "+ ",
        "  )",
        "\u001B[1m\u001B[33mError\u001B[39m in `geom_polygon()`:\u001B[22m\n\u001B[38;5;232m\u001B[33m!\u001B[38;5;232m Problem while computing aesthetics.\n\u001B[36mℹ\u001B[38;5;232m Error occurred in the 1st layer.\u001B[39m\n\u001B[1mCaused by error:\u001B[22m\n\u001B[33m!\u001B[39m object 'long' not found\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "View(us_states_sf)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(shiny); runApp('code/shiny_capstone.R')",
        "\nAttaching package: ‘dplyr’\n\nThe following objects are masked from ‘package:stats’:\n\n    filter, lag\n\nThe following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\nThe following rio suggested packages are not installed: ‘arrow’, ‘hexView’, ‘fst’, ‘pzfx’, ‘rmatio’, ‘readODS’, ‘qs’\nUse 'install_formats()' to install them\nhere() starts at /Users/brittanyspinner/Desktop/Q",
        "RME PhD 24-25/phd_w2025/educ640_capstone/educ640_R\n",
        "\r-\r/\r                                                                                           \r\r/\r                                                                                           \r\r-\r                                                                                           \r\r-\r/\r                                                                                           \r\r/\r                                                                                           \r\r-\r                              ",
        "                                                             \r\r-\r/\r                                                                                           \r\r/\r                                                                                           \r\r-\r                                                                                           \r",
        "\nAttaching package: ‘jsonlite’\n\nThe following object is masked from ‘package:shiny’:\n\n    validate\n\n\nListening on http://127.0.0.1:4584\nWarning: sf layer has inconsistent datum (+proj=longlat +ellps=clrk66 +no_defs).\nNeed '+proj=longlat +datum=WGS84'\nInput to asJSON(keep_vec_names=TRUE) is a named vector. In a future version of jsonlite, this option will not be supported, and named vectors will be translated into arrays instead of objects. If you want JSON object output, please use a named list inst",
        "ead. See ?toJSON.\nWarning: Error in filter: \u001B[38;5;232m\u001B[36mℹ\u001B[38;5;232m In argument: `region == input$selected_state`.\u001B[39m\n\u001B[1mCaused by error:\u001B[22m\n\u001B[33m!\u001B[39m object 'region' not found\n  190: \u001B[37m<Anonymous>\u001B[39m\n  189: \u001B[37msignalCondition\u001B[39m\n  188: \u001B[37msignal_abort\u001B[39m\n  187: \u001B[37mabort\u001B[39m\n  186: \u001B[37mh\u001B[39m\n  185: \u001B[37m.handleSimpleError\u001B[39m\n  184: \u001B[37meval\u001B[39m\n  183: \u001B[37mmask$eval_all_filter\u001B[39m\n  181: \u001B[37mfilter_eval\u001B[39m\n  180: \u001B[37mfilter_rows\u001B[39m\n  179: \u001B[37mfilter.data.frame\u001B[39",
        "m\n  178: \u001B[37mfilter\u001B[39m\n  177: \u001B[37m%>%\u001B[39m\n  176: \u001B[34m\u001B[1mrenderPlot [/Users/brittanyspinner/Desktop/QRME PhD 24-25/phd_w2025/educ640_capstone/educ640_R/code/shiny_capstone.R#119]\u001B[22m\u001B[39m\n  174: \u001B[37mfunc\u001B[39m\n  134: \u001B[37mdrawPlot\u001B[39m\n  120: \u001B[37m<reactive:plotObj>\u001B[39m\n  100: \u001B[37mdrawReactive\u001B[39m\n   87: \u001B[37mrenderFunc\u001B[39m\n   86: \u001B[37moutput$state_plot\u001B[39m\n    1: \u001B[37mrunApp\u001B[39m\nInput to asJSON(keep_vec_names=TRUE) is a named vector. In a future version of jsonlite, this option will not be sup",
        "ported, and named vectors will be translated into arrays instead of objects. If you want JSON object output, please use a named list instead. See ?toJSON.\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(flexdashboard)",
        "> ",
        "library(shiny)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dplyr)",
        "\nAttaching package: ‘dplyr’\n\nThe following objects are masked from ‘package:stats’:\n\n    filter, lag\n\nThe following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n\n",
        "> ",
        "library(leaflet)",
        "> ",
        "library(sf)",
        "Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n",
        "> ",
        "library(rio)",
        "The following rio suggested packages are not installed: ‘arrow’, ‘hexView’, ‘fst’, ‘pzfx’, ‘rmatio’, ‘readODS’, ‘qs’\nUse 'install_formats()' to install them\n",
        "> ",
        "library(here)",
        "here() starts at /Users/brittanyspinner/Desktop/QRME PhD 24-25/phd_w2025/educ640_capstone/educ640_R\n",
        "> ",
        "# Load Data",
        "> ",
        "df1 <- import(here(\"data/corp_76to20_bystate_MGyearrecoded.xlsx\"))",
        "\r-\r/\r                                                                           \r\r/\r                                                                           \r\r-\r                                                                           \r",
        "> ",
        "df2 <- import(here(\"data/suspensions_72to21_bystate_MGyearrecoded.xlsx\"))",
        "\r-\r/\r                                                                           \r\r/\r                                                                           \r\r-\r                                                                           \r",
        "> ",
        "df3 <- import(here(\"data/treatment dataset_2year.xlsx\"))",
        "\r-\r/\r                                                                           \r\r/\r                                                                           \r\r-\r                                                                           \r",
        "> ",
        "> ",
        "# Filter for states adopting bans in 2020+",
        "> ",
        "df_corp <- df3 %>%",
        "+ ",
        "  filter(YEAR > 2020) %>%",
        "+ ",
        "  group_by(STATE_CODE)",
        "> ",
        "> ",
        "# Convert US states to an sf object",
        "> ",
        "us_states_sf <- st_as_sf(maps::map(\"state\", fill = TRUE, plot = FALSE))",
        "> ",
        "> ",
        "# Fix column names for merging",
        "> ",
        "us_states_sf <- us_states_sf %>%",
        "+ ",
        "  rename(region = ID) %>%",
        "+ ",
        "  mutate(region = tolower(region))",
        "> ",
        "> ",
        "# Create state lookup for abbreviations",
        "> ",
        "state_lookup <- data.frame(STATE_CODE = state.abb, region = tolower(state.name))",
        "> ",
        "> ",
        "# Merge df_corp with full state names",
        "> ",
        "df_corp <- left_join(df_corp, state_lookup, by = \"STATE_CODE\")",
        "> ",
        "> ",
        "# Fix DC missing in state mapping",
        "> ",
        "df_corp$region <- if_else(is.na(df_corp$region), \"district of columbia\", df_corp$region)",
        "> ",
        "> ",
        "# Merge with map data",
        "> ",
        "us_states_sf <- left_join(us_states_sf, df_corp, by = \"region\")",
        "> ",
        "> ",
        "# Define color palette",
        "> ",
        "color_palette <- list(\"0\" = \"#e5de54\", \"1\" = \"#808c73\")",
        "> ",
        "### Static Map",
        "> ",
        "> ",
        "renderPlot({",
        "+ ",
        "  ggplot() +",
        "+ ",
        "    geom_sf(data = us_states_sf, aes(fill = as.factor(DD)), color = \"white\", size = 0.3) +",
        "+ ",
        "    scale_fill_manual(values = color_palette, labels = c(\"Not Adopted\", \"Adopted\")) +",
        "+ ",
        "    theme_minimal() +",
        "+ ",
        "    labs(",
        "+ ",
        "      title = \"Corporal Punishment Ban Adoption by State\",",
        "+ ",
        "      subtitle = \"States that adopted bans starting in 2020\",",
        "+ ",
        "      fill = \"Ban Status\"",
        "+ ",
        "    ) +",
        "+ ",
        "    theme(",
        "+ ",
        "      axis.text = element_blank(),",
        "+ ",
        "      axis.ticks = element_blank(),",
        "+ ",
        "      panel.grid = element_blank()",
        "+ ",
        "    )",
        "+ ",
        "})",
        "<shiny.render.function> \n",
        "> ",
        "# Chunk 1",
        "> ",
        "library(flexdashboard)",
        "> ",
        "library(shiny)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(leaflet)",
        "> ",
        "library(sf)",
        "> ",
        "library(rio)",
        "> ",
        "library(here)",
        "> ",
        "# Load Data",
        "> ",
        "df1 <- import(here(\"data/corp_76to20_bystate_MGyearrecoded.xlsx\"))",
        "\r-\r/\r                                                                           \r\r/\r                                                                           \r\r-\r                                                                           \r",
        "> ",
        "df2 <- import(here(\"data/suspensions_72to21_bystate_MGyearrecoded.xlsx\"))",
        "\r-\r/\r                                                                           \r\r/\r                                                                           \r\r-\r                                                                           \r",
        "> ",
        "df3 <- import(here(\"data/treatment dataset_2year.xlsx\"))",
        "\r-\r/\r                                                                           \r\r/\r                                                                           \r\r-\r                                                                           \r",
        "> ",
        "> ",
        "# Filter for states adopting bans in 2020+",
        "> ",
        "df_corp <- df3 %>%",
        "+ ",
        "  filter(YEAR > 2020) %>%",
        "+ ",
        "  group_by(STATE_CODE)",
        "> ",
        "> ",
        "# Convert US states to an sf object",
        "> ",
        "us_states_sf <- st_as_sf(maps::map(\"state\", fill = TRUE, plot = FALSE))",
        "> ",
        "> ",
        "# Fix column names for merging",
        "> ",
        "us_states_sf <- us_states_sf %>%",
        "+ ",
        "  rename(region = ID) %>%",
        "+ ",
        "  mutate(region = tolower(region))",
        "> ",
        "> ",
        "# Create state lookup for abbreviations",
        "> ",
        "state_lookup <- data.frame(STATE_CODE = state.abb, region = tolower(state.name))",
        "> ",
        "> ",
        "# Merge df_corp with full state names",
        "> ",
        "df_corp <- left_join(df_corp, state_lookup, by = \"STATE_CODE\")",
        "> ",
        "> ",
        "# Fix DC missing in state mapping",
        "> ",
        "df_corp$region <- if_else(is.na(df_corp$region), \"district of columbia\", df_corp$region)",
        "> ",
        "> ",
        "# Merge with map data",
        "> ",
        "us_states_sf <- left_join(us_states_sf, df_corp, by = \"region\")",
        "> ",
        "> ",
        "# Define color palette",
        "> ",
        "color_palette <- list(\"0\" = \"#e5de54\", \"1\" = \"#808c73\")",
        "> ",
        "> ",
        "# Chunk 2",
        "> ",
        "### Static Map",
        "> ",
        "> ",
        "renderPlot({",
        "+ ",
        "  ggplot() +",
        "+ ",
        "    geom_sf(data = us_states_sf, aes(fill = as.factor(DD)), color = \"white\", size = 0.3) +",
        "+ ",
        "    scale_fill_manual(values = color_palette, labels = c(\"Not Adopted\", \"Adopted\")) +",
        "+ ",
        "    theme_minimal() +",
        "+ ",
        "    labs(",
        "+ ",
        "      title = \"Corporal Punishment Ban Adoption by State\",",
        "+ ",
        "      subtitle = \"States that adopted bans starting in 2020\",",
        "+ ",
        "      fill = \"Ban Status\"",
        "+ ",
        "    ) +",
        "+ ",
        "    theme(",
        "+ ",
        "      axis.text = element_blank(),",
        "+ ",
        "      axis.ticks = element_blank(),",
        "+ ",
        "      panel.grid = element_blank()",
        "+ ",
        "    )",
        "+ ",
        "})",
        "<shiny.render.function> \n",
        "> ",
        "> ",
        "# Chunk 3",
        "> ",
        "> ",
        "### Interactive map ",
        "> ",
        "output$map <- renderLeaflet({",
        "+ ",
        "  leaflet(us_states_sf) %>%",
        "+ ",
        "    addTiles() %>%",
        "+ ",
        "    addPolygons(",
        "+ ",
        "      fillColor = ~color_palette[as.character(DD)],",
        "+ ",
        "      color = \"white\",",
        "+ ",
        "      weight = 1,",
        "+ ",
        "      fillOpacity = 0.8,",
        "+ ",
        "      highlightOptions = highlightOptions(weight = 3, color = \"#666\", fillOpacity = 0.9),",
        "+ ",
        "      label = ~paste0(region, \": \", ifelse(DD == 1, \"Adopted\", \"Not Adopted\")),",
        "+ ",
        "      layerId = ~region  # Enables click functionality",
        "+ ",
        "    )",
        "+ ",
        "})",
        "Error: object 'output' not found\n",
        "> ",
        "### Static Map",
        "> ",
        "> ",
        "renderPlot({",
        "+ ",
        "  ggplot() +",
        "+ ",
        "    geom_sf(data = us_states_sf, aes(fill = as.factor(DD)), size = 0.3) +",
        "+ ",
        "    scale_fill_manual(values = color_palette, labels = c(\"Not Adopted\", \"Adopted\")) +",
        "+ ",
        "    theme_minimal() +",
        "+ ",
        "    labs(",
        "+ ",
        "      title = \"Corporal Punishment Ban Adoption by State\",",
        "+ ",
        "      subtitle = \"States that adopted bans starting in 2020\",",
        "+ ",
        "      fill = \"Ban Status\"",
        "+ ",
        "    ) +",
        "+ ",
        "    theme(",
        "+ ",
        "      axis.text = element_blank(),",
        "+ ",
        "      axis.ticks = element_blank(),",
        "+ ",
        "      panel.grid = element_blank()",
        "+ ",
        "    )",
        "+ ",
        "})",
        "<shiny.render.function> \n",
        "> ",
        "# Chunk 1",
        "> ",
        "library(flexdashboard)",
        "> ",
        "library(shiny)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(leaflet)",
        "> ",
        "library(sf)",
        "> ",
        "library(rio)",
        "> ",
        "library(here)",
        "> ",
        "# Load Data",
        "> ",
        "df1 <- import(here(\"data/corp_76to20_bystate_MGyearrecoded.xlsx\"))",
        "\r-\r/\r                                                                           \r\r/\r                                                                           \r\r-\r                                                                           \r",
        "> ",
        "df2 <- import(here(\"data/suspensions_72to21_bystate_MGyearrecoded.xlsx\"))",
        "\r-\r/\r                                                                           \r\r/\r                                                                           \r\r-\r                                                                           \r",
        "> ",
        "df3 <- import(here(\"data/treatment dataset_2year.xlsx\"))",
        "\r-\r/\r                                                                           \r\r/\r                                                                           \r\r-\r                                                                           \r",
        "> ",
        "> ",
        "# Filter for states adopting bans in 2020+",
        "> ",
        "df_corp <- df3 %>%",
        "+ ",
        "  filter(YEAR > 2020) %>%",
        "+ ",
        "  group_by(STATE_CODE)",
        "> ",
        "> ",
        "# Convert US states to an sf object",
        "> ",
        "us_states_sf <- st_as_sf(maps::map(\"state\", fill = TRUE, plot = FALSE))",
        "> ",
        "> ",
        "# Fix column names for merging",
        "> ",
        "us_states_sf <- us_states_sf %>%",
        "+ ",
        "  rename(region = ID) %>%",
        "+ ",
        "  mutate(region = tolower(region))",
        "> ",
        "> ",
        "# Create state lookup for abbreviations",
        "> ",
        "state_lookup <- data.frame(STATE_CODE = state.abb, region = tolower(state.name))",
        "> ",
        "> ",
        "# Merge df_corp with full state names",
        "> ",
        "df_corp <- left_join(df_corp, state_lookup, by = \"STATE_CODE\")",
        "> ",
        "> ",
        "# Fix DC missing in state mapping",
        "> ",
        "df_corp$region <- if_else(is.na(df_corp$region), \"district of columbia\", df_corp$region)",
        "> ",
        "> ",
        "# Merge with map data",
        "> ",
        "us_states_sf <- left_join(us_states_sf, df_corp, by = \"region\")",
        "> ",
        "> ",
        "# Define color palette",
        "> ",
        "color_palette <- list(\"0\" = \"#e5de54\", \"1\" = \"#808c73\")",
        "> ",
        "> ",
        "selected_state <- reactiveVal(NULL)",
        "> ",
        "### Static Map",
        "> ",
        "> ",
        "renderPlot({",
        "+ ",
        "  ggplot() +",
        "+ ",
        "    geom_sf(data = us_states_sf, aes(fill = as.factor(DD)), size = 0.3) +",
        "+ ",
        "    scale_fill_manual(values = color_palette, labels = c(\"Not Adopted\", \"Adopted\")) +",
        "+ ",
        "    theme_minimal() +",
        "+ ",
        "    labs(",
        "+ ",
        "      title = \"Corporal Punishment Ban Adoption by State\",",
        "+ ",
        "      subtitle = \"States that adopted bans starting in 2020\",",
        "+ ",
        "      fill = \"Ban Status\"",
        "+ ",
        "    ) +",
        "+ ",
        "    theme(",
        "+ ",
        "      axis.text = element_blank(),",
        "+ ",
        "      axis.ticks = element_blank(),",
        "+ ",
        "      panel.grid = element_blank()",
        "+ ",
        "    )",
        "+ ",
        "})",
        "<shiny.render.function> \n",
        "> ",
        "# Chunk 1",
        "> ",
        "library(flexdashboard)",
        "> ",
        "library(shiny)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(leaflet)",
        "> ",
        "library(sf)",
        "> ",
        "library(rio)",
        "> ",
        "library(here)",
        "> ",
        "# Load Data",
        "> ",
        "df1 <- import(here(\"data/corp_76to20_bystate_MGyearrecoded.xlsx\"))",
        "\r-\r/\r                                                                           \r\r/\r                                                                           \r\r-\r                                                                           \r",
        "> ",
        "df2 <- import(here(\"data/suspensions_72to21_bystate_MGyearrecoded.xlsx\"))",
        "\r-\r/\r                                                                           \r\r/\r                                                                           \r\r-\r                                                                           \r",
        "> ",
        "df3 <- import(here(\"data/treatment dataset_2year.xlsx\"))",
        "\r-\r/\r                                                                           \r\r/\r                                                                           \r\r-\r                                                                           \r",
        "> ",
        "> ",
        "# Filter for states adopting bans in 2020+",
        "> ",
        "df_corp <- df3 %>%",
        "+ ",
        "  filter(YEAR > 2020) %>%",
        "+ ",
        "  group_by(STATE_CODE)",
        "> ",
        "> ",
        "# Convert US states to an sf object",
        "> ",
        "us_states_sf <- st_as_sf(maps::map(\"state\", fill = TRUE, plot = FALSE))",
        "> ",
        "> ",
        "# Fix column names for merging",
        "> ",
        "us_states_sf <- us_states_sf %>%",
        "+ ",
        "  rename(region = ID) %>%",
        "+ ",
        "  mutate(region = tolower(region))",
        "> ",
        "> ",
        "# Create state lookup for abbreviations",
        "> ",
        "state_lookup <- data.frame(STATE_CODE = state.abb, region = tolower(state.name))",
        "> ",
        "> ",
        "# Merge df_corp with full state names",
        "> ",
        "df_corp <- left_join(df_corp, state_lookup, by = \"STATE_CODE\")",
        "> ",
        "> ",
        "# Fix DC missing in state mapping",
        "> ",
        "df_corp$region <- if_else(is.na(df_corp$region), \"district of columbia\", df_corp$region)",
        "> ",
        "> ",
        "# Merge with map data",
        "> ",
        "us_states_sf <- left_join(us_states_sf, df_corp, by = \"region\")",
        "> ",
        "> ",
        "# Define color palette",
        "> ",
        "color_palette <- list(\"0\" = \"#e5de54\", \"1\" = \"#808c73\")",
        "> ",
        "> ",
        "selected_state <- reactiveVal(NULL)",
        "> ",
        "> ",
        "# Chunk 2",
        "> ",
        "### Static Map",
        "> ",
        "> ",
        "renderPlot({",
        "+ ",
        "  ggplot() +",
        "+ ",
        "    geom_sf(data = us_states_sf, aes(fill = as.factor(DD)), color = \"white\", size = 0.3) +",
        "+ ",
        "    scale_fill_manual(values = color_palette, labels = c(\"Not Adopted\", \"Adopted\")) +",
        "+ ",
        "    theme_minimal() +",
        "+ ",
        "    labs(",
        "+ ",
        "      title = \"Corporal Punishment Ban Adoption by State\",",
        "+ ",
        "      subtitle = \"States that adopted bans starting in 2020\",",
        "+ ",
        "      fill = \"Ban Status\"",
        "+ ",
        "    ) +",
        "+ ",
        "    theme(",
        "+ ",
        "      axis.text = element_blank(),",
        "+ ",
        "      axis.ticks = element_blank(),",
        "+ ",
        "      panel.grid = element_blank()",
        "+ ",
        "    )",
        "+ ",
        "})",
        "<shiny.render.function> \n",
        "> ",
        "> ",
        "# Chunk 3",
        "> ",
        "> ",
        "### Interactive map ",
        "> ",
        "output$map <- renderLeaflet({",
        "+ ",
        "  leaflet(us_states_sf) %>%",
        "+ ",
        "    addTiles() %>%",
        "+ ",
        "    addPolygons( stroke = FALSE, smoothFactor = 0,",
        "+ ",
        "      fillColor = ~color_palette[as.character(DD)],",
        "+ ",
        "      color = \"white\",",
        "+ ",
        "      weight = 1,",
        "+ ",
        "      fillOpacity = 0.8,",
        "+ ",
        "      highlightOptions = highlightOptions(weight = 3, color = \"#666\", fillOpacity = 0.9),",
        "+ ",
        "      label = ~paste0(region, \": \", ifelse(DD == 1, \"Adopted\", \"Not Adopted\")),",
        "+ ",
        "      layerId = ~region  # Enables click functionality",
        "+ ",
        "    )",
        "+ ",
        "})",
        "Error: object 'output' not found\n",
        "> ",
        "# Merge df_corp with full state names",
        "> ",
        "df_corp2 <- left_join(df2, state_lookup, by = \"STATE_CODE\")",
        "> ",
        "> ",
        "# Fix DC missing in state mapping",
        "> ",
        "df_corp2$region <- if_else(is.na(df_corp2$region), \"district of columbia\", df_corp2$region)",
        "> ",
        "> ",
        "# Merge with map data",
        "> ",
        "us_states_sf2 <- left_join(us_states_sf, df_corp2, by = \"region\")",
        "> ",
        "View(us_states_sf2)",
        "> ",
        "> ",
        "### Interactive map ",
        "> ",
        "output$map <- renderLeaflet({",
        "+ ",
        "  leaflet(us_states_sf2) %>%",
        "+ ",
        "    addTiles() %>%",
        "+ ",
        "    addPolygons( stroke = FALSE, smoothFactor = 0,",
        "+ ",
        "      fillColor = ~color_palette[as.character(DD)],",
        "+ ",
        "      color = \"white\",",
        "+ ",
        "      weight = 1,",
        "+ ",
        "      fillOpacity = 0.8,",
        "+ ",
        "      highlightOptions = highlightOptions(weight = 3, color = \"#666\", fillOpacity = 0.9),",
        "+ ",
        "      label = ~paste0(region, \": \", ifelse(DD == 1, \"Adopted\", \"Not Adopted\")),",
        "+ ",
        "      layerId = ~region  # Enables click functionality",
        "+ ",
        "    )",
        "+ ",
        "})",
        "Error: object 'output' not found\n",
        "> ",
        "View(us_states_sf2)",
        "\nRestarting R session...\n\n"
    ]
}